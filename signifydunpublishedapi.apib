FORMAT: 1A
HOST: https://api.signifyd.com/v2

# PRIVATE API

A place for the Signifyd developers to document unpublished APIs.

## Error Handling
There are 2 types of errors returned by the API server:
- Field-specific errors
- General error messages

This is our standard format (JSON):
```
{
  "errors": {
    "fieldName":[
      "Field-specific error message"
    ]
  },
  "messages": [
    "General error message"
  ]
}
```
# Group Payment Gateways

Resources related to payment gateways in the API.

## Get Gateways [/gateways?teamId={teamId}]

### Get All Gateways [GET]
+ Request (application/json)

    + Headers

            Authorization: Basic YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXo6

+ Parameters
    + teamId: 2 (integer, optional) - The teamId of the team associated with the payment gateway.

+ Response 201 (application/json)

    + Body

            {
                "gateways": [
                    {
                        "gatewayId": 1,
                        "type": "Authorize.net",
                        "typeId": 1,
                        "teamId": 20,
                        "isActive": true
                    },
                    {
                        "gatewayId": 2,
                        "type": "Authorize.net",
                        "typeId": 1,
                        "teamId": 30,
                        "isActive": true
                    }
                ]
            }

## Submit Gateways [/gateways]
### Submit New Gateway [POST]

+ Request (application/json)

    + Headers

            Authorization: Basic YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXo6

    + Body

            {
              "loginId": "adfg3rga",
              "loginPassword": "ndssdgag",
              "teamId": 20,
              "type": "Authorize.net", //Either of the following fields is allowable, one must be set.
              "typeId": 1,
            }


+ Response 200 (application/json)

    + Attributes (Gateway)

    + Body

            {
              "gatewayId": 1,
              "type": "Authorize.net",
              "typeId": 1,
              "isActive": true,
              "teamId": 20
            }

## Verification of Gateways [/gateways/{gatewayId}/verification]

### Verify Gateway [GET]

+ Parameters
    + gatewayId: 1 (integer) - The unique identifier of the payment gateway.

+ Request

    + Headers

            Authorization: Basic YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXo6

+ Response 200 (application/json)

    + Attributes (Gateway)

    + Body

            {
              "gatewayId": 1,
              "type": "Authorize.net",
              "typeId": 1,
              "teamId": 2,
              "isActive": true
            }

+ Response 400 (application/json)

    + Attributes (Gateway)

    + Body

            {
              "messages": [
                "Account verification failed."
              ]
            }


## Update or Delete a Payment Gateway [/gateways/{gatewayId}]
### Update Gateway [PUT]

+ Parameters
    + gatewayId: 1 (integer) - The unique identifier of the payment gateway.

+ Request

    + Headers

            Authorization: Basic YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXo6

    + Body

            {
              "isActive": false,
              "loginId": "adfg3rga",
              "loginPassword": "ndssdgag"
            }

+ Response 200 (application/json)

    + Attributes (Gateway)

    + Body

            {
              "gatewayId": 1,
              "type": "Authorize.net",
              "typeId": 1,
              "teamId": 2,
              "isActive": false
            }

### Delete gateway credentials [DELETE]

+ Parameters
    + gatewayId: 1 (integer) - The unique identifier of the payment gateway.

+ Request

    + Headers

            Authorization: Basic YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXo6


+ Response 200 (application/json)

    + Attributes (Gateway)



# Data Structures

## Gateway (object)
+ gatewayId: 1 (number, required) - The unique identifier of the payment gateway.
+ loginId: `adfg3rga` (string, required) - ID for payment gateway.
+ loginPassword: `ndssdgag` (string, required) - Password for payment gateway.
+ teamId: 2 (number, required) - Unique identifier for team associated with payment gateway.
+ typeId: 1 (number, optional) - Unique number identifier for payment gateway type.
+ type: Authorize.Net (string, optional) - Unique string identifier for payment gateway type.


# Group Guarantee Policies

## Get Guarantee Policies [/guaranteePolicies?teamId={teamId}]

The ApiUser must be an admin for this endpoint to work.

### List All Policies [GET]
+ Request (application/json)


+ Parameters
    + teamId: 1 (integer, optional) -The teamId of the team associated with the guarantee submission policy.

+ Response 200 (application/json)

    + Attribute (GuaranteeSubmissionPolicy)

    + Body

            {
                "guaranteePolicies": [
                    {
                        "id": 1,
                        "teamId": 12,
                        "effectiveDate": "2007-03-01T13:00:00Z",
                        "policy": "COMPLETE"
                    }
                ]
            }

## Interact with a specific policy [/guaranteePolicies/{policyId}]

### Get a specific policy [GET]
+ Paramaters
    + policyId: 1 (integer) - Unique policy id for each policy.

+ Request (application/json)

+ Response 200 (application/json)

    + Attribute (GuaranteeSubmissionPolicy)

    + Body

            {
                "id": 1,
                "teamId": 12,
                "effectiveDate": "2007-03-01T13:00:00Z",
                "policy": "COMPLETE"
            }

## Create a new Guarantee Policy [/guaranteePolicies]

### Create a New Policy [POST]

Obvious JSON object used to create a new policy.

+ Request (application/json)

    + Attribute (GuaranteeSubmissionPolicyRequest)

    + Body

            {
                "teamId": 12,
                "effectiveDate": "2007-03-01T13:00:00Z",
                "policy": "COMPLETE"
            }

+ Response 201 (application/json)

    + Attribute (GuaranteeSubmissionPolicy)

    + Body

            {
                "id": 1,
                "teamId": 12,
                "effectiveDate": "2007-03-01T13:00:00Z",
                "policy": "COMPLETE"
            }


# Group Guarantee Plans

The ApiUser must be an admin for these endpoints to work.

## Get Guarantee Plan [/guaranteePlans?customerId={customerId}&effectiveDateInSeconds={effectiveDate}]

### Get a Rate for a specific CustomerId [GET]

+ Request (application/json)

+ Parameters
    + customerId: 1 (integer) - The customerId of the customer associated with the guarantee rate.
    + effectiveDate: `2015-11-12T21:28:41.000Z` (string, optional) - The date the rate is effective in ISO-8601 date format. Defaults to <b>now</b> if not given.

+ Response 200 (application/json)

    + Attributes (GuaranteePlanResponse)

    + Body

            {
                "customerId": 5,
                "rateBps": 400,
                "monthlyMinimum": {"amount":5000.00, "currencyCode":"USD"},
                "effectiveDate": "2015-11-12T21:28:40Z",
                "expiryDate": "2015-11-12T21:28:41Z",
                "createdBy": 4,
                "planType": "LIVE",
                "salesforceOpportunityId": "012345678901234567"
            }


## Create a new Guarantee Plan [/guaranteePlans]

### Create a New Plan [POST]

JSON object used to create a new rate for a given customer. <i>expiryDate</i> is optional.
<i>createdBy</i> is the userId of the user requesting the rate record's creation.  The planType
is optional and will default to Live.
<b>NOTE</b>: Creating a new rate can (and will) overwrite or modify existing rates.


+ Request (application/json)

    + Attributes (GuaranteePlanRequest)

    + Body

            {
                "customerId": 5,
                "rateBps": 400,
                "monthlyMinimum": {"amount":5000.00, "currencyCode":"USD"},
                "effectiveDate": "2015-11-12T21:28:41Z",
                "expiryDate": "2015-11-12T21:28:41Z",
                "createdBy": 4,
                "planType": "LIVE",
                "salesforceOpportunityId": "012345678901234567"
            }

+ Response 201


# Data Structures

## GuaranteeSubmissionPolicyRequest (object)
+ teamId: 12 (number, required) - Team that owns this policy
+ effectiveDate: `2007-03-01T13:00:00Z` (string, required) - ISO-8601 compliant data and timestamp indicating when this policy takes effect
+ policy: "COMPLETE" (string, required) - Indicates what kind of policy this is: COMPLETE or ONDEMAND

## GuaranteeSubmissionPolicy (GuaranteeSubmissionPolicyRequest)
+ id: 1 (number) - Unique numeric identifer of this policy.

## GuaranteePlanResponse (object)
+ customerId: 1 (number, required) - The customerId of the customer to associate the guarantee rate with.
+ rateBps: 400 (number, required) - The rate in basis points for the GuaranteeRate.
+ monthlyMinimum (Money, optional) - The minimum monthly charge to the customer on this plan. Must be in USD.
+ effectiveDate: `2015-11-12T21:28:41Z` (string, required) - The date (in ISO-8601 and UTC) that the rate starts to be effective.
+ expiryDate: `2015-11-12T21:28:41Z` (string, optional) - The date (in ISO-8601 and UTC) that the rate stops being effective. If expiryDate is not given, the rate is has no expiration date.
+ createdBy: 4 (number, optional) - The userId of the user that created the GuaranteeRate. A missing or empty userId indcates this GuaranteeRate response was created using the company-wide default rate and is not a specific record stored for this customerId at the given effectiveDate.
+ planType: "LIVE" (PlanType, optional) - The plan type of the Guarantee Plan.
+ salesforceOpportunityId: `012345678901234567` (string, optional) - The Salesforce Opportunity ID associated with this plan.

## GuaranteePlanRequest (object)
+ customerId: 1 (number, required) - The customerId of the customer to associate the guarantee rate with.
+ rateBps: 400 (number, required) - The rate in basis points for the GuaranteeRate.
+ monthlyMinimum (Money, optional) - The minimum monthly charge to the customer on this plan. Must be in USD.
+ effectiveDate: `2015-11-12T21:28:41Z` (string, required) - The date (in ISO-8601 and UTC) that the rate starts to be effective.
+ expiryDate: `2015-11-12T21:28:41Z` (string, optional) - The date (in ISO-8601 and UTC) that the rate stops being effective. If expiryDate is not given, the rate is has no expiration date.
+ createdBy: 4 (number, required) - The userId of the user creating the GuaranteeRate. (For auditing purposes).
+ planType: "LIVE" (PlanType, optional) - The plan type of the Guarantee Plan.
+ salesforceOpportunityId: `012345678901234567` (string, optional) - The Salesforce Opportunity ID associated with this plan.

## Money (object)
+ amount: 5000.00 (number, required) - the amount of money.
+ currencyCode: USD (string, required) - a valid three-letter currency code designating the currency used.

### PlanType (enum)
    + Members
        + LIVE
        + TRIAL
        + TEST



# Group Guarantee Self Signups

The ApiUser may be a an admin or a regular user, but a regular user will be subject to more restrictions.

## Do Self Signup for a Guarantee Plan  [/guaranteeSelfSignups]

### Create a new self signup [POST]

This is a convenience method that accepts a request containing all information needed to put a new customer
onto a basic On-Demand or Complete Guarantee plan. Ordinary users will be constrained to fixed plan rates while
Signifyd reps will be able to set custom rates for customers.

This action will
- Create a guarantee plan with the requested rate for the customer,
- Set the requested policy on all teams connected to the customer,
- Put the customer on the proper subscription plan locally, and
- Register the customer for that plan with Recurly.

It will return a 200 status code along with a JSON body containing the original customerId,
the created subscriptionPlanId, and the created guaranteePlanId.
If unable to complete the above steps, a 400 will be returned.

+ Request (application/json)

    + Body

            {
              "customerId": 123,
              "emailAddress": "joe_customer@example.com",
              "recurlyToken": "TOKEN_ID",
              "rateBps": 100,
              "policy": "COMPLETE",
              "companyName": "Jeebus's Pizza Palace"
            }

+ Response 200 (application/json)

    + Body

            {
                "customerId": 123,
                "guaranteePlanId": 456,
                "planId": 90,
                "rateBps": 100
            }



# Group Billing

## Create an guarantee report builder [/billing/guaranteeReportBuilders]

### Create [POST]
Create a new guarantee report builder for a customer during a billing period, defined by a start and end date.
The start date must be on or before the end date and the range is inclusive, i.e., it
it includes events that occur on the start and end dates.

This action returns a 200 status code along with a JSON body containing the id
of the guarantee report builder. If unable to create the builder, e.g., one already exists,
a 400 will be returned.

+ Request (application/json)

    + Body

            {
                "customerId": 123,
                "start": "2016-02-01",
                "end": "2016-02-29"
            }

+ Response 200 (application/json)

    + Body

            {
                "guaranteeReportBuilderId": 54321,
                "status": "OPEN",
                "customerId": 123,
                "start": "2016-02-01",
                "end": "2016-02-29",
                "createdAt": "2015-03-02 12:34:56.000Z",
                "createdBy": 555,
                "closedAt": null,
                "closedBy": null
            }

## Work with a guarantee report builder by id [/billing/guaranteeReportBuilders/:builderId]

### Update [PUT]
Update the status of a guarantee report builder. Right now this can only be used to
cancel a guarantee report builder without generating an actual invoice.

+ Request (application/json)

    + Body

            {
                "status": "CANCELED"
            }

+ Response 200 (application/json)

    + Body

            {
                "guaranteeReportBuilderId": 54321,
                "status": "CANCELED"
            }

### Get [GET]
Retrieve the details about the specified guarantee report builder.

+ Response 200 (application/json)

    + Body

            {
                "guaranteeReportBuilderId": 54321,
                "status": "OPEN",
                "customerId": 123,
                "start": "2015-12-01",
                "end": "2015-12-31",
                "createdAt": "2015-01-02 12:34:56.000Z",
                "createdBy": 555,
                "closedAt": null,
                "closedBy": null
            }

## List multiple guarantee report builders by year and month [/billing/guaranteeReportBuilders.{format}?limit={limit}&offset={offset}&orderBy={orderBy}&ascending={ascending}&includeMeta={includeMeta}&includeData={includeData}]

### Get [GET]

Retrieves the guarantee report builders for a given month. Option to include metadata about the
items including paging information and aggregate totals.

This action returns a 200 status code along with a JSON body.

+ Request (application/json)

+ Parameters
    + format: json (string, optional) - Indicates the format of the output data ("json" or "csv"). The default is "json".
    + includeMeta: true (boolean, optional) - Indicates whether to include metadata in the results. Defaults to true.
    + includeData: true (boolean, optional) - Indicates whether to include data in the results. Defaults to true.
    + limit: 20 (integer, optional) - The max number of line items to retrieve. Defaults to 20.
    + offset: 60 (integer, optional) - The number of line items to skip. Defaults to 0. Combined with limit, allows for paging through the line items.
    + orderBy: CaseId (LineItemFilterField, optional) - The field on which to order the results. Defaults to "CaseId". Ordering occurs before offset and limit are applied.
    + ascending: true (boolean, optional) - indicates whether we are ordering the results in ascending order or not. Defaults to true.

+ Response 200 (application/json)

    + Body

            {
              "metadata": {
                "ascending": true,
                "dataIncluded": true,
                "hasMoreRows": true,
                "limit": 20,
                "metaIncluded": true,
                "nextOffset": 20,
                "numRows": 20,
                "offset": 0,
                "orderBy": "customerId",
                "prevOffset": 0,
                "totalRows": 1000
              },
              "guaranteeReportBuilders": [
                {
                  "closedAt": 1457017659,
                  "closedBy": 2,
                  "createdAt": "2016-03-02T12:41:15Z", "createdBy": 1,
                  "customerId": 123,
                  "end": "2016-02-29",
                  "guaranteeReportBuilderId": 54328,
                  "start": "2016-02-01",
                  "status": "OPEN"
                },
                {
                  "closedAt": null,
                  "closedBy": null,
                  "createdAt": "2016-03-02T12:34:56Z",
                  "createdBy": 1,
                  "customerId": 2012,
                  "end": "2016-02-29",
                  "guaranteeReportBuilderId": 54321,
                  "start": "2016-02-01",
                  "status": "CLOSED"
                },
                {
                  "closedAt": null,
                  "closedBy": null,
                  "createdAt": "2016-03-02T12:37:46Z",
                  "createdBy": 1,
                  "customerId": 2012,
                  "end": "2016-02-29",
                  "guaranteeReportBuilderId": 54323,
                  "start": "2016-02-01",
                  "status": "OPEN"
                }
              ]
            }


## Get guarantee report builder line items [/billing/guaranteeReportBuilders/:builderId/items.{format}?limit={limit}&offset={offset}&orderBy={orderBy}&ascending={ascending}&includeMeta={includeMeta}&includeData={includeData}&searchIds%5B%5D={searchIds}]

### Get [GET]

Retrieves the ledger items that will potentially go into a customer's
guarantee report for the current billing period. Option to include metadata about the
items including paging information and aggregate totals. The searchIds parameter allows the client to filter on a specific subset of items
to inspect during the reporting process.

This action returns a 200 status code along with a JSON body.

+ Request (application/json)

+ Parameters
    + format: json (string, optional) - Indicates the format of the output data ("json" or "csv"). The default is "json".
    + searchIds: [12345, 12388] (integer, optional) - Limits display to specific cases having the given ids as caseIds OR merchant orderIds. Leaving unspecified shows all guarantees meeting other criteria.
    + includeMeta: true (boolean, optional) - Indicates whether to include metadata in the results. Defaults to true.
    + includeData: true (boolean, optional) - Indicates whether to include data in the results. Defaults to true.
    + limit: 20 (integer, optional) - The max number of line items to retrieve. Defaults to 20.
    + offset: 60 (integer, optional) - The number of line items to skip. Defaults to 0. Combined with limit, allows for paging through the line items.
    + orderBy: orderDate (LineItemFilterField, optional) - The field on which to order the results. Allowed values are "orderDate", "orderId", or "caseId". Defaults to "orderDate". Ordering occurs before offset and limit are applied.
    + ascending: true (boolean, optional) - indicates whether we are ordering the results in ascending order or not. Defaults to true.

+ Response 200 (application/json)

    + Body

            {
              "metadata": {
                "ascending": true,
                "dataIncluded": true,
                "hasMoreRows": true,
                "limit": 20,
                "metaIncluded": true,
                "nextOffset": 80,
                "numRows": 20,
                "offset": 60,
                "orderBy": "orderDate",
                "prevOffset": 40,
                "reportBuilder": {
                  "closedAt": null,
                  "closedBy": null,
                  "createdAt": "2016-03-14T21:46:55.540Z",
                  "createdBy": 0,
                  "customerId": 123,
                  "end": "2016-02-29",
                  "guaranteeReportBuilderId": 123,
                  "start": "2016-02-01",
                  "status": "OPEN"
                },
                "summary": {
                  "charges": 10000,
                  "credits": 1000,
                  "gmv": 100000,
                  "netCharge": 9000,
                  "numOrders": 2000
                },
                "totalRows": 2000
              },
              "netLineItems": [
                {
                  "caseId": 12357500,
                  "guaranteeId": 654105,
                  "ledgerItems": [
                    {
                      "createdAt": "2016-02-12T15:38:17.541Z",
                      "customerId": 123,
                      "externalChargeId": null,
                      "externalInvoiceId": null,
                      "finalAmount": {
                        "amount": 3.2,
                        "currencyCode": "USD"
                      },
                      "guaranteeId": 654105,
                      "guaranteeLedgerEventType": "GUARANTEE_APPROVED",
                      "guaranteeLedgerItemId": 2121490,
                      "guaranteePlanBps": 125,
                      "investigationId": 12357500,
                      "ledgerDate": "2016-02-12T15:38:17.541Z",
                      "orderDate": "2016-02-12T15:38:17.541Z",
                      "orderTotalAmount": {
                        "amount": 256,
                        "currencyCode": "USD"
                      },
                      "parentGuaranteeLedgerItemId": null,
                      "updatedAt": "2016-02-12T15:38:17.541Z"
                    }
                  ],
                  "netCharge": 3.2,
                  "netRateBps": 125,
                  "orderAmount": {
                    "amount": 256,
                    "currencyCode": "USD"
                  },
                  "orderDate": "2016-02-11",
                  "orderId": "58ce80d4640d4f9db35fa20edeadbeef"
                },
                {
                  "caseId": 12357731,
                  "guaranteeId": 654321,
                  "ledgerItems": [
                    {
                      "createdAt": "2016-02-12T15:25:23.188Z",
                      "customerId": 123,
                      "externalChargeId": null,
                      "externalInvoiceId": null,
                      "finalAmount": {
                        "amount": 2,
                        "currencyCode": "USD"
                      },
                      "guaranteeId": 654321,
                      "guaranteeLedgerEventType": "GUARANTEE_APPROVED",
                      "guaranteeLedgerItemId": 2121212,
                      "guaranteePlanBps": 100,
                      "investigationId": 12357731,
                      "ledgerDate": "2016-02-12T15:25:23.188Z",
                      "orderDate": "2016-02-12T15:25:23.188Z",
                      "orderTotalAmount": {
                        "amount": 200,
                        "currencyCode": "USD"
                      },
                      "parentGuaranteeLedgerItemId": null,
                      "updatedAt": "2016-02-12T15:25:23.188Z"
                    },
                    {
                      "createdAt": "2016-02-12T18:41:54.336Z",
                      "customerId": 123,
                      "externalChargeId": null,
                      "externalInvoiceId": null,
                      "finalAmount": {
                        "amount": 3,
                        "currencyCode": "USD"
                      },
                      "guaranteeId": 654321,
                      "guaranteeLedgerEventType": "GUARANTEE_RATE_CHANGED",
                      "guaranteeLedgerItemId": 2121490,
                      "guaranteePlanBps": 150,
                      "investigationId": 12357731,
                      "ledgerDate": "2016-02-12T18:41:54.336Z",
                      "orderDate": "2016-02-12T15:25:23.188Z",
                      "orderTotalAmount": {
                        "amount": 200,
                        "currencyCode": "USD"
                      },
                      "parentGuaranteeLedgerItemId": 2121212,
                      "updatedAt": "2016-02-12T18:41:54.336Z"
                    }
                  ],
                  "netCharge": 3,
                  "netRateBps": 150,
                  "orderAmount": {
                    "amount": 200,
                    "currencyCode": "USD"
                  },
                  "orderDate": "2016-02-12",
                  "orderId": "58ce80d4640d4f9db35fa20ef73c3541"
                },
                {
                  "caseId": 12357812,
                  "guaranteeId": 654411,
                  "ledgerItems": [
                    {
                      "createdAt": "2016-02-12T16:11:23.765Z",
                      "customerId": 123,
                      "externalChargeId": null,
                      "externalInvoiceId": null,
                      "finalAmount": {
                        "amount": 2.25,
                        "currencyCode": "USD"
                      },
                      "guaranteeId": 654411,
                      "guaranteeLedgerEventType": "GUARANTEE_APPROVED",
                      "guaranteeLedgerItemId": 2121787,
                      "guaranteePlanBps": 75,
                      "investigationId": 12357812,
                      "ledgerDate": "2016-02-12T16:11:23.765Z",
                      "orderDate": "2016-02-12T16:11:23.765Z",
                      "orderTotalAmount": {
                        "amount": 256,
                        "currencyCode": "USD"
                      },
                      "parentGuaranteeLedgerItemId": null,
                      "updatedAt": "2016-02-12T16:11:23.765Z"
                    }
                  ],
                  "netCharge": 2.25,
                  "netRateBps": 75,
                  "orderAmount": {
                    "amount": 300,
                    "currencyCode": "USD"
                  },
                  "orderDate": "2016-02-12",
                  "orderId": "58ce80d4640d4f9db35fa20ef73ee3ee"
                }
              ]
            }


## Make a rate adjustment to a guarantee [/guarantees/:guaranteeId/rateChanges]

### Post [POST]
Submit a new rate for a guarantee. This adjustment will be posted to the ledger and
the ledger entries and total for the guarantee will be returned

+ Request (application/json)

    + Body

            {
                rateBps: 150
            }

+ Response 200 (application/json)

    + Body

            {
              "guaranteeId": 654321,
              "caseId": 12357731,
              "orderDate": "2016-02-12",
              "orderId": "58ce80d4640d4f9db35fa20ef73c3541",
              "currency": "USD",
              "amount": 200.00,
              "netRateBps": 150,
              "netCharge": 3.00,
              "included": true,
              "ledgerItems": [
                    {
                      "createdAt": "2016-02-12T15:25:23.188Z",
                      "customerId": 123,
                      "externalChargeId": null,
                      "externalInvoiceId": null,
                      "finalAmount": {
                        "amount": 2,
                        "currencyCode": "USD"
                      },
                      "guaranteeId": 654321,
                      "guaranteeLedgerEventType": "GUARANTEE_APPROVED",
                      "guaranteeLedgerItemId": 2121212,
                      "guaranteePlanBps": 100,
                      "investigationId": 12357731,
                      "ledgerDate": "2016-02-12T15:25:23.188Z",
                      "orderDate": "2016-02-12T15:25:23.188Z",
                      "orderTotalAmount": {
                        "amount": 200,
                        "currencyCode": "USD"
                      },
                      "parentGuaranteeLedgerItemId": null,
                      "updatedAt": "2016-02-12T15:25:23.188Z"
                    },
                    {
                      "createdAt": "2016-02-12T18:41:54.336Z",
                      "customerId": 123,
                      "externalChargeId": null,
                      "externalInvoiceId": null,
                      "finalAmount": {
                        "amount": 3,
                        "currencyCode": "USD"
                      },
                      "guaranteeId": 654321,
                      "guaranteeLedgerEventType": "GUARANTEE_RATE_CHANGED",
                      "guaranteeLedgerItemId": 2121490,
                      "guaranteePlanBps": 150,
                      "investigationId": 12357731,
                      "ledgerDate": "2016-02-12T18:41:54.336Z",
                      "orderDate": "2016-02-12T15:25:23.188Z",
                      "orderTotalAmount": {
                        "amount": 200,
                        "currencyCode": "USD"
                      },
                      "parentGuaranteeLedgerItemId": 2121212,
                      "updatedAt": "2016-02-12T18:41:54.336Z"
                    }
                  ]
            }


## Generate a new guarantee report [/billing/guaranteeReports]

### Post [POST]
Construct a new immutable guarantee report from an existing guarantee report builder.
After this, the guarantee report builder will be locked and can no longer be used
to build reports. The builder's lineItems will also no longer be available.


This action returns a 200 status code along with a JSON body, or status 400 upon failure.

+ Request (application/json)

    + Body

            {
                "guaranteeReportBuilderId": 2121212,
            }


+ Response 200 (application/json)

    + Body

            {
                "guaranteeReportId": 2121212
            }

+ Response 400 (application/json)

    + Body

            {
                "messages": [
                    "Unable to create a new guarantee report from builder #2121212."
                ]
            }


## Get guarantee report summaries [/billing/guaranteeReports?start={start}&end={end}&limit={limit}&offset={offset}&orderBy={orderBy}&ascending={ascending}&includeMeta={includeMeta}&includeData={includeData}]

### Get [GET]
Retrieve summaries of guarantee activity in a given period for all customers.
An optional metadata block is included, echoing details about the request
as well as row information useful for paging through the full list of customers.
These results will include references to both completed guarantee reports and
pending guarantee report builders.

This action returns a 200 status code along with a JSON body.

+ Request (application/json)

+ Parameters
    + start: `2015-12-01` (date) - Show invoices on or after this date. Format is YYYY-MM-DD.
    + end: `2015-12-31` (date) - Show invoices on or before this date. Format is YYYY-MM-DD.
    + includeMeta: true (boolean, optional) - Indicates whether to fetch metadata. Defaults to true.
    + includeData: true (boolean, optional) - Indicates whether to fetch data. Defaults to true.
    + limit: 20 (integer, optional) - The max number of summaries to retrieve. Defaults to 20. Setting to 0 will return as many rows as possible.
    + offset: 60 (integer, optional) - The number of summaries to skip. Defaults to 0. Combined with limit, allows for paging through the line items.
    + orderBy: customerId (InvoiceSummaryFilterField, optional) - The field on which to order the results. Allowed values are "customerId" or "guaranteeReportBuilderId" Defaults to "customerId". Ordering occurs before offset and limit are applied.
    + ascending: true (boolean, optional) - Whether or not the results are ordered in ascending order. Defaults to true.

+ Response 200 (application/json)

    + Body

            {
                "meta": {
                    "limit": 20,
                    "offset": 60,
                    "ordering": "ASC",
                    "orderBy": "CUSTOMER_NAME",
                    "totalRows": 1500,
                    "numRows": 20,
                    "prevOffset": 60,
                    "nextOffset": 80,
                    "hasMoreRows": true
                },
                "data": [
                    {
                        "customerId": 123,
                        "customerName": "ACME Widgets",
                        "numTeams": 2,
                        "start": "2015-12-01",
                        "end": "2015-12-31",
                        "gmv": 100000,
                        "numOrders": 2000,
                        "charges": 10000,
                        "credits": 1000,
                        "netCharge": 9000,
                        "rateBps": 100,
                        "status": "Report Generated",
                        "guaranteeReportId": 7890,
                        "guaranteeReportBuilderId": null
                    },
                    {
                        "customerId": 124,
                        "customerName": "Joe's Shoes",
                        "numTeams": 1,
                        "start": "2015-12-01",
                        "end": "2015-12-31",
                        "gmv": 50000,
                        "numOrders": 1000,
                        "charges": 5000,
                        "credits": 300,
                        "netCharge": 4700,
                        "rateBps": 125,
                        "status": "In Progress",
                        "guaranteeReportId": null,
                        "guaranteeReportBuilderId": 212112
                    }
                ]
            }


## Get itemized invoice line items [/billing/guaranteeReports/:reportId/items.{format}?limit={limit}&offset={offset}&orderBy={orderBy}&ascending={ascending}&includeMeta={includeMeta}&includeData={includeData}]

### Get [GET]

Download the specified itemized invoice in either JSON or CSV format. Specifying
content with metadata will include aggregate information. This endpoint supports
paging and ordering. In the case of a CSV downloads, paging is most likely
unneeded and limit and offset should be set to 0.

Note that the JSON version will return data with both net guarantee totals as well
as individual ledger items. CSV date will be returned as per guarantee net totals.

This action returns a 200 status code along with a JSON body or a 404 Not Found if the invoice does not exist.

+ Request (application/json)

+ Parameters
    + format: json (string, optional) - Indicates the format of the output data ("json" or "csv"). The default is "json".
    + includeMeta: true (boolean, optional) - Indicates whether to fetch metadata. Defaults to true.
    + includeData: true (boolean, optional) - Indicates whether to fetch data. Defaults to true.
    + limit: 20 (integer, optional) - The max number of summaries to retrieve. Defaults to 20. Setting to 0 will return as many rows as possible.
    + offset: 60 (integer, optional) - The number of summaries to skip. Defaults to 0. Combined with limit, allows for paging through the line items.
    + orderBy: orderDate (BillingSummaryFilterField, optional) - The field on which to order the results. Allowed values are "orderDate", "orderId", "caseId"Defaults to "orderDate". Ordering occurs before offset and limit are applied.
    + ascending: true (boolean, optional) - Whether or not the results are ordered in ascending order. Defaults to true.

+ Response 200 (application/json)

    + Body

            {
                "meta": {
                    "limit": 20,
                    "offset": 60,
                    "ordering": "ASC",
                    "orderBy": "orderDate",
                    "totalRows": 2000,
                    "numRows": 20,
                    "prevOffset": 60,
                    "nextOffset": 80,
                    "hasMoreRows": true,
                    "summary": {
                        "customerId": 123,
                        "preparedBy": 12,
                        "customerName": "ACME Widgets",
                        "numTeams": 2,
                        "start": "2015-12-01",
                        "end": "2015-12-31",
                        "rateBps": 100,
                        "gmv": 100000,
                        "numOrders": 2000,
                        "charges": 10000,
                        "credits": 1000,
                        "netCharge": 9000
                    }
                },
                "netLineItems": [
                    {
                       "orderDate": "2015-12-12",
                       "orderId": "58ce80d4640d4f9db35fa20ef73c3541",
                       "caseId": 12357731,
                       "guaranteeId": 654321,
                       "status": "APPROVED",
                       "currency": "USD",
                       "amount": 200.00,
                       "netRateBps": 150,
                       "netCharge": 3.00,
                       "ledgerItems": [
                          {
                             "guaranteeLedgerItemId": 2121212,
                             "parentGuaranteeLedgerItemId": null,
                             "event": "GUARANTEE_APPROVED"
                             "charge": 2.00,
                             "createdAt": "2015-12-12 15:25:23.188000"
                          },
                          {
                             "guaranteeLedgerItemId": 2121490,
                             "parentGuaranteeLedgerItemId": 2121212,
                             "event": "GUARANTEE_RATE_CHANGED"
                             "charge": 1.00,
                             "createdAt": "2015-12-12 18:41:54.336000"
                          },
                       ]
                    },
                    {
                        "orderDate": "2015-12-12",
                        "orderId": "58ce80d4640d4f9db35fa20ef73c3543",
                        "caseId": 12357812,
                        "guaranteeId": 654411,
                        "status": "APPROVED",
                        "currency": "USD",
                        "amount": 300.00,
                        "netRateBps": 100,
                        "netCharge": 3.00,
                        "ledgerItems": [
                           {
                             "guaranteeLedgerItemId": 2122001,
                             "parentGuaranteeLedgerItemId": null,
                             "event": "GUARANTEE_APPROVED"
                             "charge": 3.00,
                             "createdAt": "2015-12-12 15:38:17.541000"
                            }
                        ]
                    }
                ]
            }

# Data Structures


## GuaranteeReportBuilderFilterField (enum)
    + Members
        + CUSTOMER_ID
        + GUARANTEE_REPORT_BUILDER_ID

## GuaranteeReportBuilderLineItemFilterField (enum)
    + Members
        + CASE_ID
        + ORDER_DATE
        + ORDER_ID


# Group Claims

## Update a claim [/cases/{caseId}/claims]

### Update a claim [PUT]
Update an existing claim by caseId (which is equivalent to investigationId).

This action returns a 200 status code along with a JSON body containing the updated claim object.

Although the request may contain partial data, only the fields present in the request are updated.

Chargebacks included in the claim object in the request will also be updated, if they have a
chargeback id that is already connected to this case/investigation id.  Any included chargebacks
that do not have a chargeback id will be inserted instead of updated.

+ Parameters
    + caseId: 999999 (integer) - Identifier of the investigation for which a claim update is requested.

+ Request (application/json)

    + Headers

            Authorization: Basic YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXo6

    + Attribute (Claim)

    + Body

            {
                "status": "CLOSED",
                "disposition": "DECLINED",
                "dispositionReason": "It was verified that the order was received by the intended recipient."
            }

+ Response 200 (application/json)

    + Attribute (Claim)

    + Body

            {
                "investigationId": 999999,
                "createdAt": "2016-03-22T04:00:31.030Z",
                "updatedAt": "2016-03-22T04:00:31.030Z",
                "createdBy": 7,
                "updatedBy": 13,
                "status": "CLOSED",
                "disposition": "DECLINED",
                "dispositionReason": "It was verified that the order was received by the intended recipient.",
                "notes": "The order has been received by the household belonging to the person who placed the order.",
                "chargebacks": [
                    {
                        "chargebackId": 1,
                        "investigationId": 999999,
                        "merchantOrderId": null,
                        "paymentProcessor": "visa",
                        "chargebackRefId": "visa-fazzle-abcd",
                        "reason": {
                            "processorName": "visa",
                            "processorReasonCode": "81",
                            "processorReasonDescription": "Fraud"
                        },
                        "issuerReportedDate": "2016-02-20T03:15:05.343Z",
                        "signifydReportedDate": "2016-03-22T04:00:31.030Z",
                        "amount": {
                            "amount": 1234.56,
                            "currencyCode": "USD"
                        },
                        "chargebackFees": {
                            "amount": 12.34,
                            "currencyCode": "USD"
                        }
                    }
                ],
                "trackingInfo": [
                    {
                        "shipper": "UPS",
                        "trackingNumber": "1111111"
                    },
                    {
                        "shipper": "UPS",
                        "trackingNumber": "2222222"
                    }
                ],
                "documentUrls": [
                    "https://www.docs4ever.com/iu839njfdilsf8o3.pdf"
                ]
            }

## List claims with paging [/claims?createdDateStart={createdDateStart}&createdDateEnd={createdDateEnd}&customerId={customerId}&investigationId={investigationId}&claimDisposition={claimDisposition}&claimStatus={claimStatus}&limit={limit}&offset={offset}&orderBy={orderBy}&ascending={ascending}]

### Get [GET]

Download a paged list of claims in JSON format.  This endpoint supports paging and ordering via the limit, offset, orderBy and ascending parameters.
Additional parameters allow the client to filter the results with various criteria.

+ Request (application/json)

+ Parameters
    + claimDisposition: APPROVED (ClaimDispostion, optional) - Only show the claims marked with the given disposition.
    + claimStatus: OPEN (ClaimStatus, optional) - Only show the claims having the given status.
    + createdDateStart: `2016-09-23T13:46:29Z` (string, optional) - An ISO-8601 compliant date string in UTC indicating the minimum creation date of claims to include in the list.
    + createdDateEnd: `2016-09-26T09:00:00Z` (string, optional) - An ISO-8601 compliant date string in UTC indicating the maximum creation date of claims to include in the list.
    + customerId: 1234 (integer, optional) - Only show claims for the given customer.
    + investigationId: 987654321 (integer, optional) - Only show the claim for a specific investigation. This should result in zero or one item being returned.
    + limit: 20 (integer, optional) - The max number of claims to retrieve. Defaults to 20. Setting to 0 will return as many rows as possible.
    + offset: 60 (integer, optional) - The number of claims to skip. Defaults to 0. Combined with limit, allows for paging through the claims.
    + orderBy: "CREATED_AT" (string, optional) - The field on which to order the results. Allowed values are "createdAt" (default) and "chargebackAmount". Ordering occurs before offset and limit are applied.
    + ascending: true (boolean, optional) - Whether or not the results are ordered in ascending order. Defaults to true.

+ Response 200 (application/json)

    + Attribute (PagedResponseClaims)

    + Body

            {
                "ascending": true,
                "dataIncluded": true,
                "hasMoreRows": false,
                "limit": 20,
                "nextOffset": 80,
                "numRows": 2,
                "offset": 60,
                "orderColumn": "CREATED_AT",
                "prevOffset": 40,
                "responseData": [
                    {
                        "investigationId": 999981,
                        "createdAt": "2016-09-24T04:00:31.030Z",
                        "updatedAt": "2016-09-24T04:00:31.030Z",
                        "status": "CLOSED",
                        "disposition": "DECLINED",
                        "dispositionReason": "It was verified that the order was received by the intended recipient.",
                        "notes": "The order has been received by the household belonging to the person who placed the order.",
                        "chargebacks": [
                            {
                                "chargebackId": 134634,
                                "investigationId": 999981,
                                "merchantOrderId": 102240764,
                                "paymentProcessor": "visa",
                                "chargebackRefId": "visa-romeo-charlie",
                                "reason": {
                                    "processorName": "visa",
                                    "processorReasonCode": "81",
                                    "processorReasonDescription": "Fraud"
                                },
                                "issuerReportedDate": "2016-08-20T03:15:05.343Z",
                                "signifydReportedDate": "2016-08-22T04:00:31.030Z",
                                "amount": {
                                    "amount": 1234.56,
                                    "currencyCode": "USD"
                                },
                                "chargebackFees": {
                                    "amount": 12.34,
                                    "currencyCode": "USD"
                                }
                            }
                        ],
                        "trackingInfo": [
                            {
                                "shipper": "UPS",
                                "trackingNumber": "1111111"
                            },
                            {
                                "shipper": "UPS",
                                "trackingNumber": "2222222"
                            }
                        ],
                        "documentUrls": [
                            "https://www.somedomain.com/docs/1.html",
                            "https://www.somedomain.com/docs/2.html"
                        ]
                    },
                    {
                        "investigationId": 999999,
                        "createdAt": "2016-09-25T16:21:48.605Z",
                        "updatedAt": "2016-09-25T17:03:56.127Z",
                        "status": "CLOSED",
                        "disposition": "DECLINED",
                        "dispositionReason": "It was verified that the order was received by the intended recipient.",
                        "notes": "The order has been received by the household belonging to the person who placed the order.",
                        "chargebacks": [
                            {
                                "chargebackId": 134634,
                                "investigationId": 999999,
                                "merchantOrderId": 102242112,
                                "paymentProcessor": "visa",
                                "chargebackRefId": "visa-xray-novemner",
                                "reason": {
                                    "processorName": "visa",
                                    "processorReasonCode": "81",
                                    "processorReasonDescription": "Fraud"
                                },
                                "issuerReportedDate": "2016-08-21T15:11:12.607Z",
                                "signifydReportedDate": "2016-08-24T17:00:31.892Z",
                                "amount": {
                                    "amount": 2003.33,
                                    "currencyCode": "USD"
                                },
                                "chargebackFees": {
                                    "amount": 15.00,
                                    "currencyCode": "USD"
                                }
                            }
                        ],
                        "trackingInfo": [
                            {
                                "shipper": "UPS",
                                "trackingNumber": "3333333"
                            },
                            {
                                "shipper": "UPS",
                                "trackingNumber": "3333321"
                            }
                        ],
                            "documentUrls": [
                        ]
                    },

                ]
            }

## Create claims in batch [/claims/createBatches]

### Upload a CSV batch file for claim creation [POST]
Upload a CSV batch file including columns with the headers
`investigationId,orderId,chargebackAmount,chargebackCurrency,chargebackFeesAmount,chargebackFeesCurrency,paymentProcessor,chargebackRefId,chargebackReasonCode,chargebackReasonDescription,chargebackIssuerReportedDate,chargebackSignifydReportedDate,trackingNumber,shipper`
to create new claims for the specified investigations. For details about these various columns, please see the public Claims API documentation for creating a single claim.
Be aware that this batch format supports a single chargeback and single shipment tracking number per claim.
Additional columns and headers will be ignored. This can be accomplished manually by POSTing the file to the indicated endpoint with a REST API client such as
Postman and
- choosing body type `form-data`
- choose `File` (not `Text`)
- Use the key "claims"
- Use the `Choose file` dialog to locate your file.

It is important that your file have a header line that includes all the aforementioned headers and that the `content-type`
of the request be `multipart/form-data`, **not** `application/json`! Also please note that the data file should not contain anything before
the header row or after the last line of claims data.

The response to the request will be a JSON document with only the required fields from the original CSV input plus the additional boolean
fields `processed` and `processedMessage` indicating the success or failure for each row. Failed update rows will be false and include a
value in the `processedMessage` field detailing the reason for the failure. Successfully updated rows will have a value of true and leave
the message field empty. Additional, non-required fields that were included in the input will not be carried over to the output.

Please note that when using a full-featured REST client like Postman it is not necessary to create the `Content-Disposition` header
shown in the example below as this will be created automatically. When Postman has a manual header it can create a conflict and cause
the upload to fail.

+ Request (multipart/form-data; boundary=---WebKitFormBoundaryDvxbngSb0BikASJs)

        ------WebKitFormBoundaryDvxbngSb0BikASJs
        Content-Disposition: form-data; name="claims"; filename="tmp.csv"
        Content-Type: text/csv

        investigationId,orderId,chargebackAmount,chargebackCurrency,chargebackFeesAmount,chargebackFeesCurrency,paymentProcessor,chargebackRefId,chargebackReasonCode,chargebackReasonDescription,chargebackIssuerReportedDate,chargebackSignifydReportedDate,trackingNumber,shipper,comment
        12345678,ORD2112,1234.56,USD,12.00,USD,visa,visa-cb-ref-201601023,81,fraud,2016-10-20T03:15:05.343Z,2016-10-21T15:00:00.001Z,1Z12345E0205271688,UPS,"some comment that will be ignored"
        1234OOPS,XYZ1812,2512.03,USD,25.00,USD,visa,visa-cb-ref-201601990,81,fraud,2016-02-20T02:34:56.789Z,2016-10-21T16:00:00.001Z,1Z12345E0305271640,UPS,"some comment that will be ignored"

        ------WebKitFormBoundaryDvxbngSb0BikASJs--

+ Response 200 (application/json)

    + Body

            {
                [
                    {
                        "investigationId":"12345678",
                        "orderId":"ORD2112",
                        "chargebackAmount":"1234.56",
                        "chargebackCurrency":"USD",
                        "chargebackFeesAmount":"12.00",
                        "chargebackFeesCurrency":"USD",
                        "paymentProcessor":"visa",
                        "chargebackRefId":"visa-cb-ref-201601023",
                        "chargebackReasonCode":"81",
                        "chargebackReasonDescription":"fraud",
                        "chargebackIssuerReportedDate":"2016-10-20T03:15:05.343Z",
                        "chargebackSignifydReportedDate":"2016-10-21T15:00:00.001Z",
                        "trackingNumber":"1Z12345E0205271688",
                        "shipper":"UPS",
                        "processed":true,
                        "processedMessage":null
                    },
                    {
                        "investigationId":"1234OOPS",
                        "orderId":"XYZ1812",
                        "chargebackAmount":"2512.03",
                        "chargebackCurrency":"USD",
                        "chargebackFeesAmount":"25.00",
                        "chargebackFeesCurrency":"USD",
                        "paymentProcessor":"visa",
                        "chargebackRefId":"visa-cb-ref-201601990",
                        "chargebackReasonCode":"81",
                        "chargebackReasonDescription":"fraud",
                        "chargebackIssuerReportedDate":"2016-02-20T02:34:56.789Z",
                        "chargebackSignifydReportedDate":"2016-10-21T16:00:00.001Z",
                        "trackingNumber":"1Z12345E0305271640",
                        "shipper":"UPS",
                        "processed":false,
                        "processedMessage":"Bad investigationId"
                    }
                ]
            }

## Update claims in batch [/claims/updateBatches]

### Upload a CSV batch file for claim update [POST]
Upload a CSV batch file including columns with the headers `investigationId, status, disposition, dispositionReason, notes` to update existing claims for the
specified investigations. Additional columns and headers will be ignored. This can be accomplished manually by POSTing the file to the indicated endpoint with a REST API client such as
Postman and
- choosing body type `form-data`
- choose `File` (not `Text`)
- Use the key "claims"
- Use the `Choose file` dialog to locate your file.

It is important that your file have a header line of `investigationId,status,disposition,dispositionReason,notes` and that the `content-type`
of the request be `multipart/form-data`, **not** `application/json`! Also please note that the data file should not contain anything before
the header row or after the last line of claims data.

The response to the request will be a JSON document with only the required fields from the original CSV input plus the additional fields
`processed` and `processedMessage` indicating the success or failure for each row. Successfully updated rows will have a value of true
but leave the message field empty, while failed update rows will have a value of false and include reason for the failure in the message field.
Additional, non-required fields that were included in the input will not be carried over to the output.

Please note that when using a full-featured REST client like Postman it is not necessary to create the `Content-Disposition` header
shown in the example below as this will be created automatically. When Postman has a manual header it can create a conflict and cause
the upload to fail.

+ Request (multipart/form-data; boundary=---WebKitFormBoundaryDvxbngSb0BikASJs)

        ------WebKitFormBoundaryDvxbngSb0BikASJs
        Content-Disposition: form-data; name="claims"; filename="tmp.csv"
        Content-Type: text/csv

        investigationId,status,disposition,dispositionReason,notes,extraneousData
        12345678,CLOSED,APPROVED,,"notes about claim","ignorethisfield"
        12345683,CLOSED,APPROVED,,"A non-existent claim; this will fail",
        ABC12345,CLOSED,APPROVED,,"A bad claimId; this will fail","willbeignored"
        12345775,BAD_STATUS,,,"An unknown status; this will fail",
        12345790,CLOSED,BAD_DISPOSITION,"Some reason for disposition","An unknown disposition; this will fail","whatever"
        12345831,CLOSED,,"Some other reason for disposition","A missing disposition; this will fail",
        12345905,CLOSED,DECLINED,"some reason declined","notes about claim","some superfluous ref#"
        12346001,IN_REVIEW,,,"Clarification notes about claim still pending",

        ------WebKitFormBoundaryDvxbngSb0BikASJs--

+ Response 200 (application/json)

    + Body

            {
                [
                    {
                        "investigationId": "12345678",
                        "status": "CLOSED",
                        "disposition": "APPROVED",
                        "dispositionReason": "",
                        "notes": "notes about claim",
                        "processed": true,
                        "processedMessage": null
                    },
                    {
                        "investigationId": "12345683",
                        "status": "CLOSED",
                        "disposition": "APPROVED",
                        "dispositionReason": "",
                        "notes": "A non-existent claim; this will fail",
                        "processed": false,
                        "processedMessage": "Failed to update claim for investigationId 12345683"
                    },
                    {
                        "investigationId": "ABC12345",
                        "status": "CLOSED",
                        "disposition": "APPROVED",
                        "dispositionReason": "",
                        "notes": "A bad claimId; this will fail",
                        "processed": false,
                        "processedMessage": "Failed to update claim for investigation ABC12345. A required input field is missing or invalid."
                    },
                    {
                        "investigationId": "12345775",
                        "status": "BAD_STATUS",
                        "disposition": "",
                        "dispositionReason": "",
                        "notes": "An unknown status; this will fail",
                        "processed": false,
                        "processedMessage": "Failed to update claim for investigation 12345775. A required input field is missing or invalid."
                    },
                    {
                        "investigationId": "12345790",
                        "status": "CLOSED",
                        "disposition": "BAD_DISPOSITION",
                        "dispositionReason": "Some reason for disposition",
                        "notes": "An unknown disposition; this will fail",
                        "processed": false,
                        "processedMessage": "Failed to update claim for investigation 12345790. A required input field is missing or invalid."
                    },
                    {
                        "investigationId": "12345831",
                        "status": "CLOSED",
                        "disposition": "",
                        "dispositionReason": "Some other reason for disposition",
                        "notes": "A missing disposition; this will fail",
                        "processed": false,
                        "processedMessage": "Failed to update claim for investigation 12345831. A required input field is missing or invalid."
                    },
                    {
                        "investigationId": "12345905",
                        "status": "CLOSED",
                        "disposition": "DECLINED",
                        "dispositionReason": "some reason declined",
                        "notes": "notes about claim",
                        "processed": true,
                        "processedMessage": null
                    },
                    {
                        "investigationId": "12346001",
                        "status": "IN_REVIEW",
                        "disposition": "",
                        "dispositionReason": "",
                        "notes": "Clarification notes about claim still in review",
                        "processed": true,
                        "processedMessage": null
                    }
                ]
            ]


# Group Chargebacks

## Create a chargeback [/chargebacks]
### Create a chargeback [POST]
Create a new chargeback for an investigation/case.

This action returns a 201 status code along with a JSON body containing the newly-created chargeback object.

+ Request (application/json)

    + Headers

            Authorization: Basic YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXo6

    + Attribute (LegacyChargebackRequest)

    + Body

            {
                "investigationId": 999999,
                "amount": {
                    "amount": 1234.56,
                    "currencyCode": "USD"
                },
                "paymentProcessor": "visa",
                "chargebackRefId": "visa-fazzle-abcd",
                "reason": {
                    "processorName": "visa",
                    "processorReasonCode": "81",
                    "processorReasonDescription": "Fraud"
                },
                "issuerReportedDate": "2016-02-20T03:15:05.343Z",
                "chargebackFees": {
                    "amount": 12.34,
                    "currencyCode": "USD"
                }
            }

+ Response 200 (application/json)

    + Attribute (Chargeback)

    + Body

            {
                "chargebackId": 2,
                "investigationId": 999999,
                "merchantOrderId": null,
                "paymentProcessor": "visa",
                "chargebackRefId": "visa-fazzle-abcd",
                "reason": {
                    "processorName": "visa",
                    "processorReasonCode": "81",
                    "processorReasonDescription": "Fraud"
                },
                "issuerReportedDate": "2016-02-20T03:15:05.343Z",
                "signifydReportedDate": "2016-03-22T04:00:31.030Z",
                "amount": {
                    "amount": 1234.56,
                    "currencyCode": "USD"
                },
                "chargebackFees": {
                    "amount": 12.34,
                    "currencyCode": "USD"
                }
            }

## Get or update a chargeback given the chargebackId. [/chargebacks/{chargebackId}]

### Get [GET]
Get unique chargeback for a given chargebackId.

+ Parameters
    + chargebackId: 2 (integer) - The unique identifier for the requested chargeback.

+ Response 200 (application/json)

    + Attribute (Chargeback)

    + Body

            {
                "chargebackId": 1,
                "investigationId": 999999,
                "merchantOrderId": null,
                "paymentProcessor": "visa",
                "chargebackRefId": "fazzle-1",
                "reason": {
                    "processorName": "visa",
                    "processorReasonCode": "81",
                    "processorReasonDescription": "Fraud"
                },
                "issuerReportedDate": "2016-02-20T03:15:05.343Z",
                "signifydReportedDate": "2016-03-22T04:00:31.030Z",
                "amount": {
                    "amount": 1234.56,
                    "currencyCode": "USD"
                },
                "chargebackFees": {
                    "amount": 12.34,
                    "currencyCode": "USD"
                }
            }

### Update a chargeback [PUT]
Update an existing chargeback by chargebackId.

This action returns a 200 status code along with a JSON body containing the updated chargeback object
and associated tracking information if available.

+ Parameters
    + chargebackId: 2 (integer) - Identifier for the chargeback to update.

+ Request (application/json)

    + Headers

            Authorization: Basic YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXo6

    + Attribute (Chargeback)

    + Body

            {
                "merchantOrderId": "fazzle-1-id"
            }


+ Response 200 (application/json)

    + Attribute (Chargeback)

    + Body

            {
                "chargebackId": 2,
                "investigationId": 999999,
                "merchantOrderId": fazzle-1-id,
                "paymentProcessor": "visa",
                "chargebackRefId": "fazzle-1",
                "reason": {
                    "processorName": "visa",
                    "processorReasonCode": "81",
                    "processorReasonDescription": "Fraud"
                },
                "issuerReportedDate": "2016-02-20T03:15:05.343Z",
                "signifydReportedDate": "2016-03-22T04:00:31.030Z",
                "amount": {
                    "amount": 1234.56,
                    "currencyCode": "USD"
                },
                "chargebackFees": {
                    "amount": 12.34,
                    "currencyCode": "USD"
                }
            }

## Get chargebacks for a given caseId. [/cases/{caseId}/chargebacks]
### Get [GET]
Get chargebacks for a given caseId (which is equivalent to an investigationId).

+ Parameters
    + caseId: 999999 (integer) - Identifier of the investigation/case for which chargebacks are being requested.

+ Response 200 (application/json)

    + Attribute (ChargebackList)

    + Body

            {
                "chargebacks": [
                    {
                        "chargebackId": 1,
                        "investigationId": 999999,
                        "merchantOrderId": null,
                        "paymentProcessor": "visa",
                        "chargebackRefId": "fazzle-1",
                        "reason": {
                            "processorName": "visa",
                            "processorReasonCode": "81",
                            "processorReasonDescription": "Fraud"
                        },
                        "issuerReportedDate": "2016-02-20T03:15:05.343Z",
                        "signifydReportedDate": "2016-03-22T04:00:31.030Z",
                        "amount": {
                            "amount": 1234.56,
                            "currencyCode": "USD"
                        },
                        "chargebackFees": {
                            "amount": 12.34,
                            "currencyCode": "USD"
                        }
                    },
                    {
                        "chargebackId": 2,
                        "investigationId": 999999,
                        "merchantOrderId": null,
                        "paymentProcessor": "visa",
                        "chargebackRefId": "fazzle-2",
                        "reason": {
                            "processorName": "visa",
                            "processorReasonCode": "81",
                            "processorReasonDescription": "Fraud"
                        },
                        "issuerReportedDate": "2016-02-20T03:15:05.343Z",
                        "signifydReportedDate": "2016-03-22T04:00:31.030Z",
                        "amount": {
                            "amount": 789.56,
                            "currencyCode": "USD"
                        },
                        "chargebackFees": {
                            "amount": 7.89,
                            "currencyCode": "USD"
                        }
                    }
                ]
            }



## Upload a chargeback file. [/claims]

### Upload a chargeback file. [POST]
Upload a CSV batch file of the format "merchant order id, team id" to be marked as having chargeback events.
A convenient way to use this endpoint is to POST to it with a REST API client such as Postman and
- chose body type "form-data"
- "File" (not "Text")
- Use the key "chargebacks"
- Use the `Choose file` dialog to locate your file.

It is important that your file have a header line of "orderId,teamId". Also note that the content-type of the request is **not** `application/json` but `multipart/form-data`.
Also please note that the data file should not contain anything before "orderId..." or after the last line of order data.

Please note that when using a full-featured REST client like Postman it is not necessary to create the `Content-Disposition` header
shown in the example below as this will be created automatically. When Postman has a manual header it can create a conflict and cause
the upload to fail.

+ Request (multipart/form-data; boundary=---WebKitFormBoundaryDvxbngSb0BikASJs)

        ------WebKitFormBoundaryDvxbngSb0BikASJs
        Content-Disposition: form-data; name="chargebacks"; filename="tmp.csv"
        Content-Type: text/csv

        orderId,teamId
        12345678,2112
        12345683,2112
        12345775,2112
        ORD97XYZ,1301
        ORD98XEM,1301

        ------WebKitFormBoundaryDvxbngSb0BikASJs--

+ Response 200


# Group Payouts
API endpoints for working with payouts on claims.

## Create claim payouts in batch [/payouts/batches]

### Upload a CSV batch file to record claim payouts [POST]
Upload a CSV batch file to record reimbursement payout for multiple claims. This action does not initiate transfer of funds but rather records
transactions that the Signifyd claims processor has already filed with the payment service, e.g., Bill.com, PayPal, etc. Use this endpoint to
record the important data points about those payment transactions. The uploaded data file should include columns with the headers
`investigationId,accountingBatchId,payoutMethod,payeeId,payoutCurrency,payoutAmount,transactionFee,payoutDate,payoutTransactionId`
to create payout records for the specified investigations.
- `investigationId` - the id of the original investigation which has been guaranteed, claimed and is now being paid.
- `accountingBatchId` - an internal Signifyd label unique to this batch upload
- `payoutMethod` - payment method used for this payout, e.g., Bill.com
- `payeeId` - unique string identifier identifying payee in combination with payout_method
- `payoutCurrency` - currency for the amount being transferred from Signifyd accounts. As of this writing, this should only be USD.
- `payoutAmount` - amount being paid to the claimant, exclusive of any transaction fees incurred by Signifyd
- `transactionFee` - amount of transaction fees incurred by Signifyd to actually transfer funds, e.g., fees paid to PayPal
- `payoutDate` - an ISO 8601 compliant date for the payout, e.g., `2016-09-30`
- `payoutTransactionId` - the payment transaction reference# returned by the payment processor.

These columns can be in any order. Additional columns and headers will be ignored. A procedure for manually POSTing the file to the indicated endpoint with a REST API client such as
Postman is as follows:
1. Make sure you are POSTing to the proper URL endpoint listed above.
2. Choose body type `form-data`
3. Choose `File` (not `Text`)
4. Use the key "payouts"
5. Use the `Choose file` dialog to locate your file.

It is important that your file have a line of the headers mentioned above and that the `content-type`
of the request be `multipart/form-data`, **not** `application/json`! Also the data file should not contain anything before
the header row or after the last line of claims data, so please do not include any comments or personal notes.

The response to the request will be a JSON document with only the required fields from the original CSV input plus an additional field `processed`
indicating the success or failure for each row. Successfully recorded rows will have a value of "Saved", while failed rows will
have a reason for the failure. Additional, non-required fields that were included in the input will not be carried over to the output.

Please note that when using a full-featured REST client like Postman it is not necessary to create the `Content-Disposition` header
shown in the example below as this will be created automatically. When Postman has a manual header it can create a conflict and cause
the upload to fail.

+ Request (multipart/form-data; boundary=---WebKitFormBoundaryDvxbngSb0BikASJs)

        ------WebKitFormBoundaryDvxbngSb0BikASJs
        Content-Disposition: form-data; name="payouts"; filename="20160929_payouts.csv"
        Content-Type: text/csv

        investigationId,accountingBatchId,payoutMethod,payeeId,payoutCurrency,payoutAmount,transactionFee,payoutDate,payoutTransactionId,ignoredField
        12345678,"Batch20160929001",Bill.com,SomeCustomer,USD,1234.56,2016-09-29,91827465-A21X,
        12345683,"Batch20160929001",Bill.com,SomeCustomer,USD,1100.56,2016-09-29,91827455-B26X,
        ABC12345,"Batch20160929001",Bill.com,SomeCustomer,USD,542.21,2016-09-29,11333288-Q11T,"Unapproved claim; this will fail"
        12345707,"Batch20160929001",Bill.com,AnotherCustomer,USD,786.34,2016-09-29,12141589-J89P,
        12346882,"Batch20160929001",PayPal,payee@example.com,USD,456.00,2016-09-29,1ef67j12,
        99988211,"Batch20160929001",Chase,StillAnotherCustomer,USD,1211.99,2016-09-29,ZZ44AA55TT77,"Non-existent case or claim; should fail"


        ------WebKitFormBoundaryDvxbngSb0BikASJs--

+ Response 200 (text/csv)

    + Body

            investigationId,accountingBatchId,payoutMethod,payeeId,payoutCurrency,payoutAmount,transactionFee,payoutDate,payoutTransactionId,processed
            12345678,"Batch20160929001",Bill.com,SomeCustomer,USD,1234.56,2016-09-29,91827465-A21X,Paid
            12345683,"Batch20160929001",Bill.com,SomeCustomer,USD,1100.56,2016-09-29,91827455-B26X,Paid
            ABC12345,"Batch20160929001",Bill.com,SomeCustomer,USD,542.21,2016-09-29,11333288-Q11T,"Failed. Claim for case ABC12345 was not approved."
            12345707,"Batch20160929001",Bill.com,AnotherCustomer,USD,786.34,2016-09-29,12141589-J89P,Paid
            12346882,"Batch20160929001",PayPal,payee@example.com,USD,456.00,2016-09-29,1ef67j12,Paid
            99988211,"Batch20160929001",Chase,StillAnotherCustomer,USD,1211.99,2016-09-29,ZZ44AA55TT77,"Failed. Claim for case 99988211 does not exist."

## Read and write claim payout method [/payoutMethods]

### Set claim payout method [POST]
Sets the default claim payout method.

+ Request (application/json)

    + Headers

            Authorization: Basic YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXo6

    + Body

            {
                "payoutMethod": "paypal",
                "payeeId": "myPaypalAccount@email.com"
            }

+ Response 201


### Get claim payout method [GET]
Gets the default claim payout method.

+ Request (application/json)

    + Headers

            Authorization: Basic YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXo6


+ Response 200 (application/json)

    + Body

            {
                "payoutMethod": "paypal",
                "payeeId": "myPaypalAccount@email.com"
            }


# Group Partners
This is an API for administering Signifyd Partner accounts and is for internal Signifyd use only.

## Create or list partners [/partners]
### Create [POST]
Initiate a new partner relationship with a vendor. This partner account will host an API key accessible by partner users
which can be integrated into their applications for merchant management.
+ Request (application/json)
    + Body

            {
                "partnerName": "Evergreen Terrace, Ltd",
                "userFullName": "Homer Simpson",
                "userEmailAddress": "hjsimpson@donuts.com",
                "ratePlans": [
                    {
                        "planType": "COMPLETE",
                        "rateBps": 100
                    }
                ]
            }

+ Response 201
    + Body

            {
                "partnerId": 742,
                "partnerName": "Evergreen Terrace, Ltd",
                "testAccount": false,
                "partnerApiKey": "THISISAFAKETOKEN1ppbh9SE92SmXGAc",
                "createdBy": 11,
                "createdAt": "2016-06-13T22:08:25.334Z",
                "updatedAt": "2016-06-13T22:08:25.334Z",
                "ratePlans": [
                    {
                        "planType": "COMPLETE",
                        "rateBps": 100
                    }
                ]
            }

### List [GET]
Get a list of current partners (which should be relatively short so as not to require paging).
+ Response 200
    + Body

            {
                "partners": [
                    {
                        "partnerId": 742,
                        "partnerName": "Evergreen Terrace, Ltd",
                        "testAccount": false,
                        "partnerApiKey": "THISISAFAKETOKEN1ppbh9SE92SmXGAc",
                        "createdBy": 11,
                        "createdAt": "2016-06-13T22:08:25.334Z",
                        "updatedAt": "2016-06-13T22:08:25.334Z",
                        "ratePlans": [
                            {
                                "planType": "COMPLETE",
                                "rateBps": 100
                            }
                        ]
                    },
                    {
                        "partnerId": 1000,
                        "partnerName": "Lencarl, LLC",
                        "testAccount": false,
                        "partnerApiKey": "THISISAFAKETOKENqhHVyoyh6bsVStNi",
                        "createdBy": 1,
                        "createdAt": "2016-06-13T22:16:18.004Z",
                        "updatedAt": "2016-06-13T22:16:18.004Z",
                        "ratePlans": [
                            {
                                "planType": "COMPLETE",
                                "rateBps": 100
                            }
                        ]
                    }
                ]
            }

## View or modify partners [/partners/{partnerId}]
+ Parameters
    + partnerId: 742 (integer) - The partnerId of the partner on which to operate.

### View [GET]
View details about the given partner.

Note: This operation is also available to a logged-in partner, but the path changes to [/partner]

+ Response 200
    + Body

            {
                "partnerId": 742,
                "partnerName": "Evergreen Terrace, Ltd",
                "testAccount": false,
                "partnerApiKey": "THISISAFAKETOKEN1ppbh9SE92SmXGAc",
                "createdBy": 11,
                "createdAt": "2016-06-13T22:08:25.334Z",
                "updatedAt": "2016-06-13T22:08:25.334Z",
                "ratePlans": [
                    {
                        "planType": "COMPLETE",
                        "rateBps": 100
                    }
                ]
            }

+ Response 404

        {
            "messages": [
                "Could not find partner 123404"
            ]
        }


### Modify [PUT]
Make changes to the given partner.
+ Request (application/json)
    + Body

            {
                "partnerName": "Stupid Flanders, Inc",
            }

+ Response 200
    + Body

            {
                "partnerId": 742,
                "partnerName": "Stupid Flanders, Inc",
                "testAccount": false,
                "partnerApiKey": "THISISAFAKETOKEN1ppbh9SE92SmXGAc",
                "createdBy": 11,
                "createdAt": "2016-06-13T22:08:25.334Z",
                "updatedAt": "2016-06-13T23:17:59.648Z",
                "ratePlans": [
                    {
                        "planType": "COMPLETE",
                        "rateBps": 100
                    }
                ]
            }


## Create or list users for a partner [/partners/{partnerId}/users]
Note: These operations are also available to a logged-in partner, but the path changes to [/partner/users] and the partnerId is implicit.
+ Parameters
    + partnerId: 742 (integer) - The partnerId of the partner on which to operate.


### Create new user [POST]
Create a new partner user. Partner users are able to retrieve the partner API key as well as add or remove other users.
The new user will be sent an email for account verification and password setup.
+ Request (application/json)
    + Body

            {
                "emailAddress": "vpatel@example.com",
                "fullName": "Vijay Patel"
            }

+ Response 201 (application/json)
    + Body

            {
                "active": "true",
                "createdAt": "2016-06-13T22:08:25.334Z",
                "firstName": "Vijay",
                "lastName": "Patel",
                "username": "vpatel@example.com"
            }

### List users [GET]
Retrieve a list of partner users ordered by username, i.e., email address, ascending.
+ Response 200 (application/json)
    + Body

            {
                "users": [
                    {
                        "active": "true",
                        "createdAt": "2016-06-13T21:19:37.689Z",
                        "firstName": "Tina",
                        "lastName": "Smith",
                        "username": "tsmith@example.com"
                    },
                    {
                        "active": "true",
                        "createdAt": "2016-06-13T22:08:25.334Z",
                        "firstName": "Vijay",
                        "lastName": "Patel",
                        "username": "vpatel@example.com"
                    }
                ]
            }

## View or disable users [/partners/{partnerId}/users/{username}]
Note: These operations are also available to a logged-in partner, but the path changes to [/partner/users/{username}] and the partnerId is implicit.

+ Parameters
    + partnerId: 742 (integer) - The partnerId of the partner on which to operate.
    + username: vpatel@example.com (string) - username, i.e., email address, of the user upon which to act.


### View user details [GET]
View the details for a single user. The username is the user's email address.

+ Response 200 (application/json)

    + Body

            {
                "active": true,
                "createdAt": "2016-06-13T22:08:25.334Z",
                "firstName": "Vijay",
                "lastName": "Patel",
                "username": "vpatel@example.com"
            }

### Disable user [DELETE]
Disable a user so they are no longer allowed to access the partner account.
+ Response 204 (application/json)


# Group File Upload

# File Upload Service

This is a simple file upload handler, specifically (at least for now) for PCI-sensitive documents and files.

## File Upload [/]

### Upload [POST]
  Post multipart/form-data style body containing a file, "filename", "senstivity" flag (currently always 1) and investigation "caseId".

  On success, this action returns a 200 status code with no body.  On failure, an appropriate HTTP Status code is returned with a body explaining the problem.

  *Fields*

    file        The file itself
    filename    A name for the file
    sensitive   1 for PCI-sensitive document
    caseId      the investigation ID code

+ Request
    + Headers

            Content-Type: multipart/form-data, boundary=mainBoundary

    + Body

            Content-Type: multipart/form-data; boundary=mainBoundary
            Content-Length: 387

            -----------------------------mainBoundary
            Content-Disposition: form-data; name="caseId"

            12345678
            -----------------------------mainBoundary
            Content-Disposition: form-data; name="sensitive"

            1
            -----------------------------mainBoundary
            Content-Disposition: form-data; name="file"; filename="filename.txt"
            Content-Type: text/plain

            Hello, World.
            -----------------------------mainBoundary--


+ Response 200



# Data Structures

## Amount (object)
+ amount (number) the amount money
+ currencyCode (string) the ISO 4217 code for the currency

## ChargebackRequest (object)
+ amount - **required for creation**
    + amount: 1234.56 (number) - The amount of the transaction being charged back.
    + currencyCode: `USD` (string) - The ISO 4217 code for the transaction currency.
+ merchantOrderId: null (string, optional) - Order identifier as given by merchant.
+ paymentProcessor: `visa` (string, optional) - Payment processor (e.g. Visa, Mastercard, etc.).
+ chargebackRefId: `visa-123` (string, optional) - Payment processor or other reference identifier for chargeback.
+ reason (optional)
    + processorName: `visa` (string, optional) - Payment processor (e.g. Visa, Mastercard, etc.).
    + processorReasonCode: `81` (string, optional) - Reason code issued by payment processor.
    + processorReasonDescription: `Fraud` (string, optional) - Detailed reason description issued by payment processor.
+ issuerReportedDate: `2016-02-20T03:15:05.343Z` (string, optional) - yyyy-MM-dd'T'HH:mm:ssZ Timestamp when chargeback was reported to issuer.
+ signifydReportedDate: `2016-03-22T04:00:31.030Z` (string, optional) - yyyy-MM-dd'T'HH:mm:ssZ Timestamp when chargeback was reported to Signifyd (defaults to creation time in database).
+ chargebackFees (optional) - Chargeback fees in addition to the chargeback amount.
    + amount: 12.34 (number) - The amount of the chargeback fee.
    + currencyCode: `USD` (string) - The ISO 4217 code for the chargeback fee currency.

## LegacyChargebackRequest (ChargebackRequest)
+ investigationId: 999999 (number) - Identifier for the investigation or case that got a chargeback, **required for creation**.

## Chargeback (LegacyChargebackRequest)
+ chargebackId: 2 (number) - The unique identifier of the chargeback, **required for updating**.

## ChargebackList (object)
+ trackingInfo (array[Chargeback])

## TrackingInfoRequest (object)
 + shipper: `UPS` (string) - The shipper's name.
 + trackingNumber: `1111111` (string) - The order's tracking number.

## TrackingInfoList (object)
+ trackingInfo (array[TrackingInfoRequest])

## TrackingInfoResponse (object)
+ investigationId: 999999 (number) - Identifier for the investigation or case for which a claim is sought.
+ trackingInfo (array[TrackingInfoRequest])

## ClaimStatus (enum)
    + Members
        + CANCELLED (string)
        + PENDING (string)
        + PENDING DOCS (string)
        + IN REVIEW (string)
        + CLOSED (string)

## ClaimDisposition (enum)
    + Members
        + APPROVED (string)
        + DECLINED (string)

## ClaimRequest (object)
+ chargebacks (array[ChargebackRequest], optional)
+ trackingInfo (array[TrackingInfoRequest], optional)

## Claim (ClaimRequest)
+ investigationId: 999999 (number) - Identifier for the investigation or case that got a chargeback.
+ createdAt: `2016-02-20T03:15:05.343Z` (string): Automatic timestamp indicating when the claim was created.
+ updatedAt: `2016-02-20T03:15:05.343Z` (string): Automatic timestamp indicating when the claim was last modified.
+ status (enum, required)
    + CANCELLED (string)
    + PENDING (string)
    + PENDING DOCS (string)
    + IN REVIEW (string)
    + CLOSED (string)
+ disposition (enum) - This is **required when status is CLOSED**.
    + APPROVED (string)
    + DECLINED (string)
+ dispositionReason: `It was verified that the order was received by the intended recipient.` (string) - This is **required when disposition is DECLINED**.
+ notes: `The order has been received by the household belonging to the person who placed the order.` (string, optional)
+ documentUrls (array[string]) - URLs of uploaded documents pertinent to the claim.

## PagedResponse (object)
+ ascending (boolean) - true if the data was requested in ascending order; false for descending
+ dataIncluded (boolean) - true if the data was requested to be included in the response; false to skip data (e.g., when only requesting metadata)
+ hasMoreRows (boolean) - true if there are more rows of data available after the current list
+ limit: 20 (number) - the maximum number of items requested for this list. The actual list length may be shorter. This value should be used in subsequent paging requests.
+ nextOffset: 80 (number) - offset value to use to retrieve the next page of data.
+ numRows: 20 (number) - the actual number of rows returned from the request (even if actual data was excluded). Should be <= limit
+ offset: 60 (number) - the number of items that were skipped to generate the list.
+ orderColumn: `CREATED_AT` (string) - the column by which the current list was sorted. Should be used in subsequent paging requests.
+ prevOffset: 40 (number) - offset value to use to retrieve previous page of data.

## PagedResponseClaims (PagedResponse)
+ responseData (array[Claim])

## Partner (object)
+ partnerId: 2 (number) - The unique id of the partner. This is also the id of the customer attached to this partner, **required for updating**.
+ partnerName `General Ecommerce, LLC` (string) - Common name of the company participating in the partnership: **required for creation**
+ testAccount: false (boolean, optional) - Flag indicating this is a test partner account.
+ partnerApiKey: `THISISAFAKETOKEN1ppbh9SE92SmXGAc` (string) - Generated API key that will allow Partner to manage their merchants via the API.
+ createdBy: 123 (number, optional) - Id of the Signifyd user who setup this Partner account. Inferred from session.
+ createdAt: `2016-06-13T22:08:25.334Z` (string) - Automatic timestamp indicating when Partner account was created.
+ updatedAt: `2016-06-13T22:08:25.334Z` (string) - Automatic timestamp indicating when Partner account was last modified.
+ planType: `COMPLETE` (string, required): The name of the plan type that the partner has chosen.
+ rateBps: 100 (number, required): The rate in bps that the partner has chosen for the plan type.

