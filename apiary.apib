FORMAT: 1A
HOST: https://api.signifyd.com/v2

# Signifyd API

This doc will show you how to use our REST API to authenticate, make requests, and retrieve data. All responses to and from the API will be in [JSON](http://www.tutorialspoint.com/json/json_data_types.htm).

## Authentication
You authenticate to the API by providing your API key in the request.
You can find your API key on your [account](https://app.signifyd.com/settings) page.

Authentication to the API occurs via [HTTP Basic Auth](http://en.wikipedia.org/wiki/Basic_access_authentication#Client_side).
Provide your API key as the basic auth username. You do not need to provide a password, but some REST clients expect a username:password pair separated by a colon. Since there is no explicit password with the API key, it will need to be followed simply by a colon in those cases.

Be sure all API calls to Signifyd are made over HTTPS, otherwise they will fail.

## REST Client
Our API docs include a built-in REST console you can use to interactively test the API. Each endpoint is configured with example request data that will produce a successful result from our API if you provide valid credentials. By default, the API key in the REST console is `abcdefghijklmnopqrstuvwxyz` which appears in it's base64 encoded form, `YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXo6`. You must replace this with you own base64 encoded API key in the headers section of the console to successfully submit requests.

## Response Codes
We use conventional HTTP response codes to indicate success or failure of an API request. In general, codes in the 2xx range indicate success, codes in the 4xx range indicate an error that resulted from the provided information (e.g. a required parameter was missing, a charge failed, etc.), and codes in the 5xx range indicate an error with Signifyd's servers.

| Code| Description |
| --- | --- |
|`200`| Success. Request completed. |
|`201`| Success. New resource created. |
|`204`| Success. No content to return. Only the status code returns. |
|`400`| Bad Request - The request could not be parsed. |
|`401`| Unauthorized - user is not logged in, could not be authenticated. |
|`403`| Forbidden - Cannot access resource. |
|`404`| Not Found - resource doesn't exist. |
|`409`| Conflict - with state of the resource on server. Can occur with (too rapid) PUT requests. |
|`5xx`| Server error. |

## Error Messages
There are two types of errors returned by the API server in the bodies of 4xx and 5xx responses:
- Field-specific errors
- General error messages

This is our standard format:
```
{
  "errors": {
    "fieldName":[
      "Field-specific error message, e.g., fieldName is not a valid email address."
    ]
  },
  "messages": [
    "General error message."
  ]
}
```

## Dates
Our API uses the [ISO8601](http://en.wikipedia.org/wiki/ISO_8601) date format for
complete date plus hours, minutes, seconds and timezone offset.

```
         yyyy-MM-dd'T'HH:mm:ssZ
For UTC: 2015-11-03T13:21:58+00:00
For PST: 2015-11-03T13:21:58-08:00
```
For more information about your specific programming language, please view [this document](https://developers.google.com/gmail/markup/reference/datetime-formatting).
## Group Cases

Resources related to cases in the API.

## Create a Case [/cases]
To investigate a transaction, you create a case resource.

Technically, when creating a case all fields are optional, and you can create a case with as
much or as little data as you have. However, we have labeled certain fields as required if we believe
they are necessary to provide an accurate score.

Read the description of each field carefully. More data is better for scoring, but it is always better
to leave a field blank rather than fill it in with data that does not quite fit the definition.

### Create a Case [POST]

+ Request (application/json)

    + Headers

            Authorization: Basic YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXo6

    + Attributes (CaseCreation)

    + Body

            {
                "purchase": {
                    "orderSessionId": "uha3d98weicm20eufhlqe",
                    "browserIpAddress": "192.168.1.1",
                    "orderId": "4fj58as",
                    "createdAt": "2016-07-11T17:54:31-05:00",
                    "paymentGateway": "stripe",
                    "paymentMethod": "credit_card",
                    "transactionId": "1a2sf3f44f21s1",
                    "currency": "USD",
                    "avsResponseCode": "Y",
                    "cvvResponseCode": "M",
                    "orderChannel": "PHONE",
                    "receivedBy": "John Doe",
                    "totalPrice": 74.99,
                    "products": [
                        {
                            "itemId": "1",
                            "itemName": "Sparkly sandals",
                            "itemUrl": "http://mydomain.com/sparkly-sandals",
                            "itemImage": "http://mydomain.com/images/sparkly-sandals.jpeg",
                            "itemQuantity": 1,
                            "itemPrice": 49.99,
                            "itemWeight": 5
                        },
                        {
                            "itemId": "2",
                            "itemName": "Summer tank top",
                            "itemUrl": "http://mydomain.com/summer-tank",
                            "itemImage": "http://mydomain.com/images/summer-tank.jpeg",
                            "itemQuantity": 1,
                            "itemPrice": 19.99,
                            "itemWeight": 2
                        }
                    ],
                    "shipments": [
                        {
                            "shipper": "UPS",
                            "shippingMethod": "ground",
                            "shippingPrice": 10,
                            "trackingNumber": "3A4U569H1572924642"
                        },
                        {
                            "shipper": "USPS",
                            "shippingMethod": "international",
                            "shippingPrice": 20,
                            "trackingNumber": "9201120200855113889012"
                        }
                    ]
                },
                "recipient": {
                    "fullName": "Bob Smith",
                    "confirmationEmail": "bob@gmail.com",
                    "confirmationPhone": "5047130000",
                    "organization": "SIGNIFYD",
                    "deliveryAddress": {
                        "streetAddress": "123 State Street",
                        "unit": "2A",
                        "city": "Chicago",
                        "provinceCode": "IL",
                        "postalCode": "60622",
                        "countryCode": "US",
                        "latitude": 41.92,
                        "longitude": -87.65
                    }
                },
                "card": {
                    "cardHolderName": "Robert Smith",
                    "bin": 407441,
                    "last4": "1234",
                    "expiryMonth": 12,
                    "expiryYear": 2015,
                    "billingAddress": {
                        "streetAddress": null,
                        "unit": "2A",
                        "city": "Chicago",
                        "provinceCode": "IL",
                        "postalCode": "60622",
                        "countryCode": "US",
                        "latitude": 41.92,
                        "longitude": -87.65
                    }
                },
                "userAccount": {
                    "email": "bob@gmail.com",
                    "username": "bobbo",
                    "phone": "5555551212",
                    "createdDate": "2013-01-18T17:54:31-05:00",
                    "accountNumber": "54321",
                    "lastOrderId": "4321",
                    "aggregateOrderCount": 40,
                    "aggregateOrderDollars": 5000,
                    "lastUpdateDate": "2013-01-18T17:54:31-05:00"
                },
                "seller": {
                    "name": "We sell awesome stuff, Inc.",
                    "email": "wesellawesomestuff@gmail.com",
                    "username": "awesomestuff1234",
                    "phone": "8883334545",
                    "domain": "wesellawesomestuff.com",
                    "createdDate": "2012-01-09T12:33:34-04:00",
                    "accountNumber": "54321",
                    "aggregateOrderCount": 4000,
                    "aggregateOrderDollars": 3000000.00,
                    "lastUpdateDate": "2016-07-22T07:22:33-04:00",
                    "onboardingIpAddress": "192.122.1.1",
                    "onboardingEmail": "wesellawesomestuff@gmail.com",
                    "shipFromAddress": {
                        "streetAddress": "1850 Mercer Rd",
                        "unit": null,
                        "city": "Lexington",
                        "provinceCode": "KY",
                        "postalCode": "40511",
                        "countryCode": "US",
                        "latitude": 38.07,
                        "longitude": -84.53
                    },
                    "corporateAddress": {
                        "streetAddress": "410 Terry Ave",
                        "unit": "3L",
                        "city": "Seattle",
                        "provinceCode": "WA",
                        "postalCode": "98109",
                        "countryCode": "US",
                        "latitude": 47.6,
                        "longitude": -122.33
                    }
                }
            }

+ Response 201 (application/json)

    + Body

            {"investigationId":1}


## Retrieve a Case [/cases/{caseId}]
Endpoint for retrieving individual cases by the unique case identifier issued by Signifyd at case creation.

### Get a Case [GET]

+ Parameters
    + caseId: 44 (integer) - The unique identifier for the case that you want to retrieve.  This identifier is issued upon case creation.

+ Request

    + Headers

            Authorization: Basic YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXo6

+ Response 200 (application/json)

    + Attributes (Case)


    + Body

            {
                guaranteeEligible: false,
                guaranteeDisposition: "APPROVED",
                status: "DISMISSED",
                caseId: 44,
                score: 776,
                investigationId: 44,
                uuid: "97c56c86-7984-44fa-9a3e-7d5f34d1bead",
                headline: "Maxine Trycia",
                orderId: "1234",
                orderDate: "2013-01-18T22:54:29+0000",
                orderAmount: 48,
                associatedTeam: "1",
                reviewDisposition: "GOOD",
                createdAt: "2013-03-06T23:17:17+0000",
                updatedAt: "2013-03-06T23:17:18+0000"
            }

+ Response 404 (application/json)

    + Body

            {
              messages: [
                  "There is no case with that id, or you do not have permission to access it."
              ]
            }


## Group Guarantees


## Submit a Case for Guarantee [/guarantees]
A case can be manually submitted for Guarantee. This is equivalent to clicking the Guarantee button in the case console.
Note that you have 7 days from the order date to submit a case for Guarantee.

### Create guarantee [POST]

+ Request (application/json)
    + Headers

            Authorization: Basic YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXo6
    + Body

            {
                "caseId": 44
            }


+ Response 201 (application/json)

    + Body

            {
                "disposition": "APPROVED",
                "reviewedBy": "support@signifyd.com",
                "reviewedAt": "2016-02-23T22:28:43+0000",
                "submittedBy": "support@signifyd.com",
                "submittedAt": "2016-02-02T18:09:57+0000",
                "rereviewCount": 0,
                "caseId": 8260439,
                "guaranteeId": 53
            }

    + Attributes (GuaranteeRequest)

+ Response 404 (application/json)
    + Body

            {
                "error": "Requested case cannot be found."
            }

## Cancel a Guarantee Request [/cases/{caseId}/guarantee]
A Guarantee can be canceled for orders that no longer require chargeback insurance. Example: Your customer cancels the order and you issue a refund, you run out of stock for the ordered item, or you cancel the order. This is equivalent to clicking the “cancel guarantee request” button in the case console.
Before canceling a guarantee request you should check the Guarantee Disposition using GET a Case. In some instances the Guarantee may have a declined decision, in which case it does not need to be cancelled.

### Cancel Guarantee [PUT]

+ Parameters
    + caseId: 44 (integer) - The id for the case whose guarantee is being cancelled.

+ Request
    + Headers

            Authorization: Basic YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXo6

    + Body

            {
               "guaranteeDisposition" : "CANCELED"
            }

+ Response 200 (application/json)

    + Attributes (GuaranteeRequest)

    + Body

            {
                "disposition": "CANCELED",
                "reviewedBy": "support@signifyd.com",
                "reviewedAt": "2016-02-23T22:28:43+0000",
                "submittedBy": "support@signifyd.com",
                "submittedAt": "2016-02-02T18:09:57+0000",
                "rereviewCount": 0,
                "caseId": 8260439,
                "guaranteeId": 53
            }



## Group Webhooks

Webhooks are messages sent by SIGNIFYD via HTTP POST to a url you configure on your [Notifications](https://app.signifyd.com/settings/notifications) page in the SIGNIFYD settings.
Webhook messages are sent when certain events occur in the life of an investigation. They allow your application to
receive pushed updates about a case, rather than poll SIGNIFYD for status changes.

### Supported Events
You can create webhooks in SIGNIFYD for the following events.  Each event has a corresponding topic identifier
which will be sent in the `X-SIGNIFYD-TOPIC` header of the webhook.

Currently the Case Creation, Case Rescore, Case Review and Guarantee Completion events can trigger a webhook.

| Event| `X-SIGNIFYD-TOPIC` | Description |
| --- | --- | --- |
| Case Creation | `cases/creation` | Sent immediately after a case is created |
| Case Rescore | `cases/rescore` | Sent anytime a case is scored following case creation |
| Case Review | `cases/review` | Sent anytime a user assigns a case a Review Disposition (thumbs up/down on console) |
| Guarantee Completion | `guarantees/completion` | Sent anytime a guarantees decision is made on a case |

### Webhook Response
        {
            analysisUrl: "https://signifyd.com/v2/cases/1/analysis",
            entriesUrl: "https://signifyd.com/v2/cases/1/entries",
            notesUrl: "https://signifyd.com/v2/cases/1/notes",
            orderUrl: "https://signifyd.com/v2/cases/1/order",
            guaranteeEligible: false,
            status: "DISMISSED",
            uuid: "709b9107-eda0-4cdd-bdac-a82f51a8a3f3",
            headline: "John Smith",
            reviewDisposition: null,
            associatedTeam: {
                teamName: "anyTeam",
                teamId: 26,
                getAutoDismiss: true,
                getTeamDismissalDays: 2 },
            orderId: "19418",
            orderDate: "2013-06-17T06:20:47-0700",
            orderAmount: 365.99,
            createdAt: "2013-11-05T14:23:26-0800",
            updatedAt: "2013-11-05T14:23:26-0800",
            investigationId: 1,
            score: 262,
            caseId: 1,
            guaranteeDisposition: "APPROVED"
        }

### Verification

To allow a client to verify a webhook message has in fact come from SIGNIFYD, an `X-SIGNIFYD-SEC-HMAC-SHA256` header is included in each webhook POST message. The contents of this header is the Base64 encoded output of the HMAC SHA256 encoding of the JSON body of the message, using the team's API key as the encryption key. To verify the authenticity of the webhook message, you should calculate this value yourself and verify it equals the value contained in the header.

See this example [code snippet](https://gist.github.com/blaskey/9533364) for an example of how to compute the value in Java.

### Testing a Webhook
Once a webhook is configured, a test POST can be sent by selecting the Test button next to the desired webhook in the Signifyd console settings.
The test webhook message is sent with an HMAC SHA256 verification header (see Webhook Verification below).
The header value is the Base64 encoded output of the HMAC SHA256 encoding of the test webhook JSON body,
using the team API key when available. The test webhook message uses the secret key `ABCDE`. A 'cases/test' topic header is also sent with the test POST.

Webhooks are messages sent by Signifyd via HTTP POST to endpoint designated using the calls detailed below.
Webhook messages are sent when certain events occur in the life of an investigation. They allow the client application to
receive pushed updates about a case, rather than poll Signifyd for status changes. Only one URL may be specified per event,
though there is no reason the same URL couldn't be used for all events, using the topic header to determine what kind of event
was sent.

## Manage Webhook Lists [/teams/webhooks]
### Create [POST]
+ Request (application/json)
Create new webhook events for team accounts. Creating a webhook for events that already exist will result in an error. Use the update method to modify existing webhook events.

    + Attribute (array[WebhookRequest])

    + Body

            {
                "teamId": 1234,
                "webhooks":
                    [
                        {
                            "event": "CASE_REVIEW",
                            "url": "http://knickknacks.examplepartner.com/signifydWebhook.php"
                        },
                        {
                            "event": "CASE_CREATION",
                            "url": "http://knickknacks.examplepartner.com/signifydWebhook.php"
                        },
                    ]
            }

+ Response 200 (application/json)

    + Attribute (array[Webhook])

    + Body

            [
                {
                    "id": 4661,
                    "url": "http://knickknacks.examplepartner.com/signifydWebhook.php",
                    "eventType": "CASE_REVIEW",
                    "team": {
                        "teamName": "Consolidated Knick-Knacks/Amalgamated Tchotchke, Inc.",
                        "teamId": 1234
                    },
                    "eventDisplayText": "Case Review"
                },
                {
                    "id": 4659,
                    "url": "http://knickknacks.examplepartner.com/signifydWebhook.php",
                    "eventType": "CASE_CREATION",
                    "team": {
                        "teamName": "Consolidated Knick-Knacks/Amalgamated Tchotchke, Inc.",
                        "teamId": 1234
                    },
                    "eventDisplayText": "Case Creation"
                }
            ]

+ Response 400 (application/json)
This error response follows our standard error message format, but it also includes an echo of the original request in the `requestBody` field.

    + Body

            {
                "requestBody": {
                    "teamId": null,
                    "webhooks": [
                        {
                            "event": "CASE_REVIEW",
                            "url": "http://knickknacks.examplepartner.com/signifydWebhook.php",
                        },
                        {
                            "eventType": "CASE_CREATION",
                            "url": "http://knickknacks.examplepartner.com/signifydWebhook.php",
                        }
                    ]
                },
                "errors": {
                    "webhooks[1].url": [
                        "A webhook already exists for that event type"
                    ],
                    "webhooks[0].url": [
                        "A webhook already exists for that event type"
                    ]
                },
                "messages": []
            }

### Update [PUT]
Update existing webhook events for a team en masse, overwriting existing topics with new URLs.
Existing webhooks whose events were not specified in the request will remain intact.
+ Request (application/json)

    + Attribute (array[WebhookRequest])

    + Body

        {
            "teamId": 1234,
            "webhooks":
            [

                {
                    "event": "CASE_REVIEW",
                    "url": "http://knickknacks.examplepartner.com/altReview.php"
                },
                {
                    "event": "GUARANTEE_COMPLETION",
                    "url": "http://knickknacks.examplepartner.com/altGuaranteeCompletion.php"
                }
            ]
        }

+ Response 200 (application/json)

    + Attribute (array[Webhook])

    + Body

            [
                {
                    "id": 5011,
                    "url": "http://knickknacks.examplepartner.com/altReview.php"
                    "eventType": "CASE_REVIEW",
                    "team": {
                        "teamName": "Consolidated Knick-Knacks/Amalgamated Tchotchke, Inc.",
                        "teamId": 1234
                    },
                    "eventDisplayText": "Case Review"
                },
                {
                    "id": 5012,
                    "url": "http://knickknacks.examplepartner.com/altGuaranteeCompletion.php"
                    "eventType": "GUARANTEE_COMPLETION",
                    "team": {
                        "teamName": "Consolidated Knick-Knacks/Amalgamated Tchotchke, Inc.",
                        "teamId": 1234
                    },
                    "eventDisplayText": "Guarantee Completion"
                }
            ]


### List [GET]
Retrieve a list of the current webhooks for a team identified by the API key used.
+ Response 200 (application/json)

    + Attribute (array[Webhook])

    + Body

            [
                {
                    "id": 4661,
                    "url": "http://knickknacks.examplepartner.com/signifydWebhook.php",
                    "eventType": "CASE_REVIEW",
                    "team": {
                        "teamName": "Consolidated Knick-Knacks/Amalgamated Tchotchke, Inc.",
                        "teamId": 1234
                    },
                    "eventDisplayText": "Case Review"
                },
                {
                    "id": 4659,
                    "url": "http://knickknacks.examplepartner.com/signifydWebhook.php",
                    "eventType": "CASE_CREATION",
                    "team": {
                        "teamName": "Consolidated Knick-Knacks/Amalgamated Tchotchke, Inc.",
                        "teamId": 1234
                    },
                    "eventDisplayText": "Case Creation"
                },
                {
                    "id": 4658,
                    "url": "http://knickknacks.examplepartner.com/signifydWebhook.php",
                    "eventType": "GUARANTEE_COMPLETION",
                    "team": {
                        "teamName": "Consolidated Knick-Knacks/Amalgamated Tchotchke, Inc.",
                        "teamId": 1234
                    },
                    "eventDisplayText": "Guarantee Completion"
                },
                {
                    "id": 4660,
                    "url": "http://knickknacks.examplepartner.com/signifydWebhook.php",
                    "eventType": "CASE_RESCORE",
                    "team": {
                        "teamName": "Consolidated Knick-Knacks/Amalgamated Tchotchke, Inc.",
                        "teamId": 1234
                    },
                    "eventDisplayText": "Case Rescore"
                }
            ]

## Manage Single Webhooks [/teams/webhooks/{hookId}]

+ Parameters
    + hookId: 4660 (number) - Signifyd generated id for the given webhook. These are available when webhooks are first created or when listing webhooks.

### Update [PUT]
Replace the URL for an existing webhook identfied by its numeric id.

+ Request (application/json)

    + Body

            {
                "url": "http://knickknacks.examplepartner.com/altRescore.php"
            }


+ Response 200 (application/json)

    + Attribute (Webhook)

    + Body

                {
                    "id": 4660,
                    "url": "http://knickknacks.examplepartner.com/signifydWebhook.php",
                    "team": {
                        "teamId": 1234,
                        "teamName": "Consolidated Knick-Knacks/Amalgamated Tchotchke, Inc."
                    },
                    "eventType": "CASE_RESCORE",
                    "eventDisplayText": "Case Rescore"
                }


### Delete [DELETE]
Delete an existing webhook identified by its numeric id.

+ Response 204



### Group Device Fingerprint

Signifyd’s device fingerprinting solution uniquely tracks and identifies devices used to transact on your site, increasing your protection from fraud.

### 1. Install the Javascript snippet

Place the following script just before the closing `</head>` tag on all public facing pages. The script loads asynchronously and does not affect page load time.

Note: *We recommend that you load the script on all public user facing pages. If you are unable to load the script on pages such as payment, login, etc, make sure to have loaded the script at least once before the checkout process is complete.*

```
<script
async
type="text/javascript"
id="sig-api"
data-order-session-id="YOUR-SESSION-ID-HERE"
src="https://cdn-scripts.signifyd.com/api/script-tag.js"></script>
```

### 2. Provide a unique session id

Replace `data-order-session-id` with a unique session id for the current user's browsing session.

### 3. Send the session id on case creation

After an order is created on your website you will need to add the value you used for `data-order-session-id` to the body of the API POST request to, `https://api.signifiyd.com/v2/cases` under the `purchase` object:

```
// Create a Case
// POST https://api.signifyd.com/v2/cases
// Body
{
    "purchase": {
        "orderSessionId": "YOUR-SESSION-ID-HERE",
        "browserIpAddress": "192.168.1.1",
        "orderId": "4fj58as",
        "createdAt": "2016-07-11T17:54:31-05:00",
        "paymentGateway": "stripe",
        "paymentMethod": "credit_card",
        "transactionId": "1a2sf3f44f21s1",
        "currency": "USD",
       …
    }
}
```

View the [create a case](http://docs.signifydapi.apiary.io/#reference/cases/create-a-case/create-a-case) docs for additional information on creating cases.

### Testing the Signifyd device fingerprinting script
During testing you may want to confirm that the Signifyd device fingerprinting script is working correctly. To do so you can call the `SIGNIFYD_GLOBAL.scriptTagHasLoaded()` method which will return a boolean `true|false` value.

Note - *we have namespaced all of the device fingerprinting methods under the `SIGNIFYD_GLOBAL` object to avoid potential naming conflicts.*

# Data Structures

## Case (object)
+ guaranteeEligible: false(boolean, required) - boolean value indicating if a guarantee can be requested for this Case.  If a guarantee has already been requested for this case, then this value will be 'false'.
+ guaranteeDisposition (GuaranteeDisposition, optional) - If a case has been submitted for guarantee, this field will be present and indicate the decision state of the guarantee.
+ status (CaseStatus, required) - The current status of the case. OPEN, PROCESSING AND HELD are considered active cases. FLAGGED and DISMISSED are considered resolved cases.
+ caseId: 44 (number, required) - The unique identifier assigned to the case when it is created.
+ score: 776 (number, required) - A value from 0-1000 indicating the likelihood that the order/transaction is fraud. 0 indicates the highest risk, 1000 inidicates the lowest risk.
+ investigationId: 44 (number, optional) - DEPRECATED.  See caseId.
+ uuid: `97c56c86-7984-44fa-9a3e-7d5f34d1bead` (string, required) - A universally unique id assigned to the case.
+ headline: Maxine Trycia (string, required) - The headline (aka name) assigned to the case.
+ orderId: 1234 (string, required) - The unique identifier for the order that was provided when the case was created.
+ orderDate: `2013-01-18T22:54:29+0000` (string, optional) - The date and time when the order was placed.
+ orderAmount: 48 (number, required) - The total price of the order, including shipping price and taxes.
+ associatedTeam: 1 (number, required) - The id for the team with which this case is associated.
+ reviewDisposition (ReviewDisposition, required) - The review disposition signifies the agent's opinion after reviewing the case, the value will be FRAUDULENT or GOOD based on the agent's review. If there is no review by the agent the value will be UNSET or NULL.
+ createdAt: `2013-03-06T23:17:17+0000` (string, required) - The date and time when the case was created.
+ updatedAt: `2013-03-06T23:17:18+0000` (string, required) - The date and time when the case was last updated.

## GuaranteeRequest (object)
+ disposition (string) - Guarantee decision result
+ reviewedBy (string) - Analyst who made the decision.
+ reviewedAt (string) - Time of decision. See the Dates section for date formats.
+ submittedBy (string) - User who requested the guarantee.
+ submittedAt (string) - Time when guarantee is requested. See the Dates section for date formats.
+ rereviewCount (number) - Count if there was any re-review
+ caseId (number) - The unique identifier assigned to the case when it is created.
+ guaranteeId (number) - The unique identifier assigned for this guarantee.

## GuaranteeDisposition (enum)
+ APPROVED
+ DECLINED
+ PENDING
+ CANCELED
+ IN_REVIEW

## CaseStatus (enum)
+ OPEN
+ PROCESSING
+ FLAGGED
+ DISMISSED
+ HELD

## ReviewDisposition (enum)
+ GOOD
+ FRAUDULENT
+ UNSET 

## CaseCreation (object)

+ purchase (Purchase) - Data related to purchase event represented in this Case Creation request.
+ recipient (Recipient) - Data related to person or organization receiving the items purchased.
+ card (Card) - Data related to the card that was used for the purchase and its cardholder.
+ userAccount (UserAccount) - Commonly, a customer must create an account before placing an order. These data values are details from that account. You should only fill these values in if the customer has an account into which they can login. Leave them blank if this was a one-time transaction with no account.
+ seller (Seller) - All data related to the seller of the product. This information is optional unless you are operating a marketplace, listing goods on behalf of multiple sellers who each hold a seller account registered with your site (e.g. Ebay).

## Purchase (object)

+ browserIpAddress (string, required) - The IP Address of the browser that was used to make the purchase. This is the IP Address that was used to connect to your site and make the purchase.
+ orderSessionId (string) - The unique ID for the user's browsing session. This is to be used in conjunction with the Signifyd Fingerprinting Javascript.
+ shipments (array[Shipment]) - The shipments associated with this purchase.
+ products (array[Product]) - The products purchased in the transaction.
+ orderId (string, required) - A string uniquely identifying this order.
+ createdAt (string, required) - `yyyy-MM-dd'T'HH:mm:ssZ` The date and time when the order was placed, shown on the signifyd console. See the Dates section of these docs for more information about date formats.
+ paymentGateway (string) - The gateway that processed the transaction. For paypal orders use paypal_account.
+ paymentMethod (PaymentMethod) - The method the user used to complete the purchase.
+ transactionId (string) - The unique identifier provided by the payment gateway for this order. If you have provided us with credentials for your payment gateway we can obtain additional details about the order, like AVS and CVV status, from your payment provider.
+ currency (string) - The currency type of the order, in 3 letter ISO 4217 format. Defaults to USD.
+ avsResponseCode (string, required) - The response code from the address verification system (AVS). Accepted codes: http://www.emsecommerce.net/avs_cvv2_response_codes.htm
+ cvvResponseCode (string, required) - The response code from the card verification value (CVV) check. Accepted codes listed on above link.
+ orderChannel (OrderChannel) - The method used by the buyer to place the order. Either WEB or PHONE.
+ receivedBy (string) - If the order was was taken by a customer service or sales agent, his or her name.
+ totalPrice (number, required) - The total price of the order, including shipping price and taxes.

## OrderChannel (enum)
+ WEB
+ PHONE

## PaymentMethod (enum)
+ ACH
+ APPLE_PAY
+ AMAZON_PAYMENTS
+ CASH
+ CHECK
+ PAYMENT_CARD
+ FREE
+ GOOGLE_WALLET
+ LOAN
+ PAYPAL_ACCOUNT

## Recipient (object)
+ fullName (string, required) - The full name of the person receiving the goods. If this item is being shipped, then this field is the person it is being shipping to. Don't assume this name is the same as card.cardHolderName. Only put a value here if the name will actually appear on the shipping label. If this item is digital, then this field will likely be blank.
+ confirmationEmail (string, required) - When this purchase was completed, you likely sent a confirmation email or you will be sending a confirmation email to someone once you approve the order. This is the email address to which that confirmation email will be sent.
+ confirmationPhone (string) - The phone number that you would call if there was something wrong with this order or the phone number that was supplied with the shipping information.
+ organization (string) - If provided by the buyer, the name of the recipient's company or organization.
+ deliveryAddress (DeliveryAddress, required) - The address to which the order will be delivered.
+ ageRange (string) - age range of the recipient or null.

## Shipment (object)
+ shippingPrice (number) - The amount charged to the customer for shipping the product
+ shipper (string) -The name of the shipper 
Accepted Values: FEDEX, USPS, UPS, DHL, SHIPWIRE, PICKUP
+ shippingMethod (string) - The type of the shipment method used
Accepted Values: FREE, GROUND, STANDARD, EXPRESS, OVERNIGHT, TWO_DAY, TWO_DAY_MORNING, THREE_DAY, PRIORITY, PRIORITY_INTERNATIONAL, FIRST_CLASS, FIRST_CLASS_INTERNATIONAL, FREIGHT, CRITICAL, INTERNATIONAL
+ trackingNumber (string) The tracking number for the shipment.

## Card (object)
+ cardHolderName (string, required) - The full name on the credit card that was charged.
+ bin (number) - The first six digits of the credit card, the bank identification number, which uniquely identifies the issuer.
+ last4 (string) - The last four digits of the card number.
+ expiryMonth (number) - MM representation of the expiration month of the card.
+ expiryYear (number) - yyyy representation of the expiration year of the card.
+ billingAddress (Address, required) - The billing address for the card.

## UserAccount (object)
+ email (string) - The primary email address associated with the account.
+ username (string) - The username associated with the account. Please supply this even if it is the same as the email address.
+ phone (string) - The phone number associated with the account.
+ createdDate (string) - `yyyy-MM-dd'T'HH:mm:ssZ` The date when the account was created. See the Dates section of these docs for more information about date formats.
+ accountNumber (string) - Your unique identifier for the account.
+ lastOrderId (string) - The unique identifier for the last order placed by this account, prior to the current order.
+ aggregateOrderCount (number) - The total count of orders placed by this account since it was created, including the current order.
+ aggregateOrderDollars (number) - The total amount spent by this account since it was created, including the current order.
+ lastUpdateDate (string) - `yyyy-MM-dd'T'HH:mm:ssZ` The last time a change was made to this account other than an order being placed. Examples include changing email addresses or adding a new credit card. See the Dates section of these docs for more information about date formats.

## Seller (object)
+ name (string) - The business name of the seller.
+ email (string) - The primary email address associated with the seller.
+ username (string) - The unique username associated with the seller. This will likely be whatever they use to login to your site. Please supply this even if it is the same as the email address.
+ accountNumber (string) Your unique, internal identifier for the seller if different from username.
+ phone (string) - The phone number associated with the seller.
+ domain (string) - The domain of the seller.
+ createdDate (string) - `yyyy-MM-dd'T'HH:mm:ssZ` The date when the seller account was created on your site.
+ aggregateOrderCount (number) - The total count of orders sold by this seller since it was created, including the current order.
+ aggregateOrderDollars (number) - The total amount sold by this seller since it was created, including the current order.
+ lastUpdateDate (string) -  `yyyy-MM-dd'T'HH:mm:ssZ` The last time a change was made to this seller (e.g. changed email).
+ onboardingIpAddress (string) - The IP address of the device used when this seller account was created.
+ onboardingEmail (string) - The email address associated with this seller account when it was created.
+ shipFromAddress (Address) - The location from which the seller shipped the order.
+ corporateAddress (Address) - The corporate address of the seller.

## Address (object)
+ streetAddress (string) - The street number and street name.
+ unit (string) - The unit or apartment number.
+ city (string) - The city name.
+ provinceCode (string) - The code or abbreviation for the province.
+ postalCode (string) - The postal code.
+ countryCode (string) - The two-letter ISO-3166 country code. If left blank, we will assume US.
+ latitude (number) - The latitude of the address. Used when address details are not provided. Ignored otherwise.
+ longitude (number) - The longitude of the address. Used when address details are not provided. Ignored otherwise.
+ role (string) - Indicates the roles played by this address.  Example values are ipGeo, billingAddress, and deliveryAddress

## DeliveryAddress (object)
+ isDeliverable (boolean) - Indicates whether the Postal Service can deliver mail to this address.
+ isReceivingMail (boolean) - Indicates if the address is currently receiving mail. Possible values are true, false, or null.
+ type (string) - This indicates the US Postal Service opinion about whether this address is primarily a “Business” or “Residential”.
+ deliveryPoint (string) - Only valid for US address LocationType. Indicates to the US Postal Service whether deliver of mail requires special handling. One of: CommercialMailDrop, POBoxThrowback, POBox, MultiUnit, SingleUnit.
+ Include Address

## Product (object)
+ itemId (string) - Your unique identifier for the product. This is a string because of hexadecimal identifiers.
+ itemName (string) - The name of the product.
+ itemUrl (string) - The url to the product's page.
+ itemImage (string) - The url to an image of the product.
+ itemQuantity (number) - The number of the items purchased.
+ itemPrice (number) - The price paid for each item (not the aggregate).
+ itemWeight (number) - The weight of each item in grams.
lat
## InvestigationStatus (enum)
+ OPEN
+ PROCESSING
+ FLAGGED
+ DISMISSED
+ HELD

## WebhookEventType (enum)
+ CASE_CREATION
+ CASE_RESCORE
+ CASE_REVIEW
+ GUARANTEE_COMPLETION

## WebhookRequest (object)
+ event (WebhookEventType) - the type/topic of the event
+ url: `http://knickknacks.examplepartner.com/signifydWebhook.php` (string) - the URL to which the webhook data should be sent when the event is triggered

## Webhook (object)
+ id: 1234 (number) - unique Signifyd generated integer identifying this webhook
+ eventType (WebhookEventType) - the type/topic of the event
+ eventDisplayText: `Guarantee Completion` (string) - A more human friendly version of the event type.
+ url: `http://knickknacks.examplepartner.com/signifydWebhook.php` (string) - the URL to which the webhook data should be sent when the event is triggered
+ team
    + teamId: 1234 (number) - id of the team owning this webhook
    + teamName: "Consolidated Knick-Knacks, Inc." (string) - name of the team owning this webhook

## WebhookPayload (object)
+ analysisUrl: `https://signifyd.com/v2/cases/1/analysis` (string)
+ entriesUrl: `https://signifyd.com/v2/cases/1/entries` (string)
+ notesUrl: `https://signifyd.com/v2/cases/1/notes` (string)
+ orderUrl: `https://signifyd.com/v2/cases/1/order` (string)
+ guaranteeEligible (boolean)
+ status: "DISMISSED" (InvestigationStatus)
+ uuid: `709b9107-eda0-4cdd-bdac-a82f51a8a3f3` (string)
+ headline: `John Smith` (string)
+ reviewDisposition (string)
+ associatedTeam
+     teamName: `MyTeamName` (string)
+     teamId: 26 (number)
+     getAutoDismiss (boolean)
+     getTeamDismissalDays (number)
+ orderId: 19418 (number)
+ orderDate: `2013-06-17T06:20:47-0700` (string)
+ orderAmount: 365.99 (number)
+ createdAt: `2013-11-05T14:23:26-0800` (string)
+ updatedAt: `2013-11-05T14:23:26-0800` (string)
nce + investigationId: 1 (number)
+ score: 262 (number)
+ caseId: 1 (number)
+ guaranteeDisposition: "APPROVED" (GuaranteeDisposition)